   always @ (rst) begin
	assign reg0 = (rst)? 16'h0000: reg0 ;
	assign reg1 = (rst)? 16'h0000: reg1 ;
	assign reg2 = (rst)? 16'h0000: reg2 ;
	assign reg3 = (rst)? 16'h0000: reg3 ;
	assign reg4 = (rst)? 16'h0000: reg4 ;
	assign reg5 = (rst)? 16'h0000: reg5 ;
	assign reg6 = (rst)? 16'h0000: reg6 ;
	assign reg7 = (rst)? 16'h0000: reg7 ;
   end

   //assign read1data = reg0;
////////////////////////////////////
 always @ (read1regsel) begin
   case (read1regsel)
	3'b000: read1data_reg = reg0;
	3'b001: read1data_reg = reg1;
	3'b010: read1data_reg = reg2;
	3'b011: read1data_reg = reg3;
	3'b100: read1data_reg = reg4;
	3'b101: read1data_reg = reg5;
	3'b110: read1data_reg = reg6;
	3'b111: read1data_reg = reg7;
	default: begin err <= 1; end
    endcase
   
   end

   assign read1data = read1data_reg;
   

   always @ (read2regsel) begin
   case (read2regsel)
	3'b000: read2data_reg = reg0;
	3'b001: read2data_reg = reg1;
	3'b010: read2data_reg = reg2;
	3'b011: read2data_reg = reg3;
	3'b100: read2data_reg = reg4;
	3'b101: read2data_reg = reg5;
	3'b110: read2data_reg = reg6;
	3'b111: read2data_reg = reg7;
	default: begin err <= 1; end
  endcase
  end

   assign read2data = read2data_reg;
//////////////////////////////
/*
   always @ (clk, read1regsel) begin
   case (read1regsel)
	3'b000: assign read1data_reg = (clk)?reg0: read1data_reg ;
	3'b001: assign read1data_reg = (clk)?reg1: read1data_reg ;
	3'b010: assign read1data_reg = (clk)?reg2: read1data_reg ;
	3'b011: assign read1data_reg = (clk)?reg3: read1data_reg ;
	3'b100: assign read1data_reg = (clk)?reg4: read1data_reg ;
	3'b101: assign read1data_reg = (clk)?reg5: read1data_reg ;
	3'b110: assign read1data_reg = (clk)?reg6: read1data_reg ;
	3'b111: assign read1data_reg = (clk)?reg7: read1data_reg ;
	default: begin end
    endcase
   
   end

   assign read1data = read1data_reg;
   

   always @ (clk, read2regsel) begin
   case (read2regsel)
	3'b000: assign read2data_reg = (clk)?reg0: read2data_reg ;
	3'b001: assign read2data_reg = (clk)?reg1: read2data_reg ;
	3'b010: assign read2data_reg = (clk)?reg2: read2data_reg ;
	3'b011: assign read2data_reg = (clk)?reg3: read2data_reg ;
	3'b100: assign read2data_reg = (clk)?reg4: read2data_reg ;
	3'b101: assign read2data_reg = (clk)?reg5: read2data_reg ;
	3'b110: assign read2data_reg = (clk)?reg6: read2data_reg ;
	3'b111: assign read2data_reg = (clk)?reg7: read2data_reg;
	default: begin end
  endcase
  end

   assign read2data = read2data_reg;
*/
   
   always @ (clk) begin
   case (writeregsel)
	3'b000: assign reg0 = (clk & write)? writedata: reg0;
	3'b001: assign reg1 = (clk & write)? writedata: reg1;
	3'b010: assign reg2 = (clk & write)? writedata: reg2; 
	3'b011: assign reg3 = (clk & write)? writedata: reg3;
	3'b100: assign reg4 = (clk & write)? writedata: reg4;
	3'b101: assign reg5 = (clk & write)? writedata: reg5;
	3'b110: assign reg6 = (clk & write)? writedata: reg6;
	3'b111: assign reg7 = (clk & write)? writedata: reg7;
	default: begin err<= 1; end
    endcase
   end
    
$date
	Tue Oct 26 22:49:55 2021
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end

$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end

$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 | err $end
$var wire 1 #! read1regsel [2] $end
$var wire 1 $! read1regsel [1] $end
$var wire 1 %! read1regsel [0] $end
$var wire 1 &! read2regsel [2] $end
$var wire 1 '! read2regsel [1] $end
$var wire 1 (! read2regsel [0] $end
$var wire 1 )! writeregsel [2] $end
$var wire 1 *! writeregsel [1] $end
$var wire 1 +! writeregsel [0] $end
$var wire 1 ,! writedata [15] $end
$var wire 1 -! writedata [14] $end
$var wire 1 .! writedata [13] $end
$var wire 1 /! writedata [12] $end
$var wire 1 0! writedata [11] $end
$var wire 1 1! writedata [10] $end
$var wire 1 2! writedata [9] $end
$var wire 1 3! writedata [8] $end
$var wire 1 4! writedata [7] $end
$var wire 1 5! writedata [6] $end
$var wire 1 6! writedata [5] $end
$var wire 1 7! writedata [4] $end
$var wire 1 8! writedata [3] $end
$var wire 1 9! writedata [2] $end
$var wire 1 :! writedata [1] $end
$var wire 1 ;! writedata [0] $end
$var wire 1 <! writedata_xor [15] $end
$var wire 1 =! writedata_xor [14] $end
$var wire 1 >! writedata_xor [13] $end
$var wire 1 ?! writedata_xor [12] $end
$var wire 1 @! writedata_xor [11] $end
$var wire 1 A! writedata_xor [10] $end
$var wire 1 B! writedata_xor [9] $end
$var wire 1 C! writedata_xor [8] $end
$var wire 1 D! writedata_xor [7] $end
$var wire 1 E! writedata_xor [6] $end
$var wire 1 F! writedata_xor [5] $end
$var wire 1 G! writedata_xor [4] $end
$var wire 1 H! writedata_xor [3] $end
$var wire 1 I! writedata_xor [2] $end
$var wire 1 J! writedata_xor [1] $end
$var wire 1 K! writedata_xor [0] $end
$var wire 1 L! writedata_addi [15] $end
$var wire 1 M! writedata_addi [14] $end
$var wire 1 N! writedata_addi [13] $end
$var wire 1 O! writedata_addi [12] $end
$var wire 1 P! writedata_addi [11] $end
$var wire 1 Q! writedata_addi [10] $end
$var wire 1 R! writedata_addi [9] $end
$var wire 1 S! writedata_addi [8] $end
$var wire 1 T! writedata_addi [7] $end
$var wire 1 U! writedata_addi [6] $end
$var wire 1 V! writedata_addi [5] $end
$var wire 1 W! writedata_addi [4] $end
$var wire 1 X! writedata_addi [3] $end
$var wire 1 Y! writedata_addi [2] $end
$var wire 1 Z! writedata_addi [1] $end
$var wire 1 [! writedata_addi [0] $end
$var wire 1 \! write $end
$var wire 1 ]! read1data [15] $end
$var wire 1 ^! read1data [14] $end
$var wire 1 _! read1data [13] $end
$var wire 1 `! read1data [12] $end
$var wire 1 a! read1data [11] $end
$var wire 1 b! read1data [10] $end
$var wire 1 c! read1data [9] $end
$var wire 1 d! read1data [8] $end
$var wire 1 e! read1data [7] $end
$var wire 1 f! read1data [6] $end
$var wire 1 g! read1data [5] $end
$var wire 1 h! read1data [4] $end
$var wire 1 i! read1data [3] $end
$var wire 1 j! read1data [2] $end
$var wire 1 k! read1data [1] $end
$var wire 1 l! read1data [0] $end
$var wire 1 m! read2data [15] $end
$var wire 1 n! read2data [14] $end
$var wire 1 o! read2data [13] $end
$var wire 1 p! read2data [12] $end
$var wire 1 q! read2data [11] $end
$var wire 1 r! read2data [10] $end
$var wire 1 s! read2data [9] $end
$var wire 1 t! read2data [8] $end
$var wire 1 u! read2data [7] $end
$var wire 1 v! read2data [6] $end
$var wire 1 w! read2data [5] $end
$var wire 1 x! read2data [4] $end
$var wire 1 y! read2data [3] $end
$var wire 1 z! read2data [2] $end
$var wire 1 {! read2data [1] $end
$var wire 1 |! read2data [0] $end
$var wire 1 }! read1data_reg [15] $end
$var wire 1 ~! read1data_reg [14] $end
$var wire 1 !" read1data_reg [13] $end
$var wire 1 "" read1data_reg [12] $end
$var wire 1 #" read1data_reg [11] $end
$var wire 1 $" read1data_reg [10] $end
$var wire 1 %" read1data_reg [9] $end
$var wire 1 &" read1data_reg [8] $end
$var wire 1 '" read1data_reg [7] $end
$var wire 1 (" read1data_reg [6] $end
$var wire 1 )" read1data_reg [5] $end
$var wire 1 *" read1data_reg [4] $end
$var wire 1 +" read1data_reg [3] $end
$var wire 1 ," read1data_reg [2] $end
$var wire 1 -" read1data_reg [1] $end
$var wire 1 ." read1data_reg [0] $end
$var wire 1 /" fetch_clk $end
$var wire 1 0" instr [15] $end
$var wire 1 1" instr [14] $end
$var wire 1 2" instr [13] $end
$var wire 1 3" instr [12] $end
$var wire 1 4" instr [11] $end
$var wire 1 5" instr [10] $end
$var wire 1 6" instr [9] $end
$var wire 1 7" instr [8] $end
$var wire 1 8" instr [7] $end
$var wire 1 9" instr [6] $end
$var wire 1 :" instr [5] $end
$var wire 1 ;" instr [4] $end
$var wire 1 <" instr [3] $end
$var wire 1 =" instr [2] $end
$var wire 1 >" instr [1] $end
$var wire 1 ?" instr [0] $end
$var wire 1 @" halt $end
$var wire 1 A" addi $end
$var wire 1 B" xor_en $end
$var wire 1 C" opcode [1] $end
$var wire 1 D" opcode [0] $end
$var wire 1 E" temp_instr [15] $end
$var wire 1 F" temp_instr [14] $end
$var wire 1 G" temp_instr [13] $end
$var wire 1 H" temp_instr [12] $end
$var wire 1 I" temp_instr [11] $end
$var wire 1 J" temp_instr [10] $end
$var wire 1 K" temp_instr [9] $end
$var wire 1 L" temp_instr [8] $end
$var wire 1 M" temp_instr [7] $end
$var wire 1 N" temp_instr [6] $end
$var wire 1 O" temp_instr [5] $end
$var wire 1 P" temp_instr [4] $end
$var wire 1 Q" temp_instr [3] $end
$var wire 1 R" temp_instr [2] $end
$var wire 1 S" temp_instr [1] $end
$var wire 1 T" temp_instr [0] $end
$var wire 1 U" xor_res [15] $end
$var wire 1 V" xor_res [14] $end
$var wire 1 W" xor_res [13] $end
$var wire 1 X" xor_res [12] $end
$var wire 1 Y" xor_res [11] $end
$var wire 1 Z" xor_res [10] $end
$var wire 1 [" xor_res [9] $end
$var wire 1 \" xor_res [8] $end
$var wire 1 ]" xor_res [7] $end
$var wire 1 ^" xor_res [6] $end
$var wire 1 _" xor_res [5] $end
$var wire 1 `" xor_res [4] $end
$var wire 1 a" xor_res [3] $end
$var wire 1 b" xor_res [2] $end
$var wire 1 c" xor_res [1] $end
$var wire 1 d" xor_res [0] $end
$var wire 1 e" beq_out [15] $end
$var wire 1 f" beq_out [14] $end
$var wire 1 g" beq_out [13] $end
$var wire 1 h" beq_out [12] $end
$var wire 1 i" beq_out [11] $end
$var wire 1 j" beq_out [10] $end
$var wire 1 k" beq_out [9] $end
$var wire 1 l" beq_out [8] $end
$var wire 1 m" beq_out [7] $end
$var wire 1 n" beq_out [6] $end
$var wire 1 o" beq_out [5] $end
$var wire 1 p" beq_out [4] $end
$var wire 1 q" beq_out [3] $end
$var wire 1 r" beq_out [2] $end
$var wire 1 s" beq_out [1] $end
$var wire 1 t" beq_out [0] $end

$scope module iRF $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var wire 1 #! read1regsel [2] $end
$var wire 1 $! read1regsel [1] $end
$var wire 1 %! read1regsel [0] $end
$var wire 1 &! read2regsel [2] $end
$var wire 1 '! read2regsel [1] $end
$var wire 1 (! read2regsel [0] $end
$var wire 1 )! writeregsel [2] $end
$var wire 1 *! writeregsel [1] $end
$var wire 1 +! writeregsel [0] $end
$var wire 1 ,! writedata [15] $end
$var wire 1 -! writedata [14] $end
$var wire 1 .! writedata [13] $end
$var wire 1 /! writedata [12] $end
$var wire 1 0! writedata [11] $end
$var wire 1 1! writedata [10] $end
$var wire 1 2! writedata [9] $end
$var wire 1 3! writedata [8] $end
$var wire 1 4! writedata [7] $end
$var wire 1 5! writedata [6] $end
$var wire 1 6! writedata [5] $end
$var wire 1 7! writedata [4] $end
$var wire 1 8! writedata [3] $end
$var wire 1 9! writedata [2] $end
$var wire 1 :! writedata [1] $end
$var wire 1 ;! writedata [0] $end
$var wire 1 \! write $end
$var wire 1 ]! read1data [15] $end
$var wire 1 ^! read1data [14] $end
$var wire 1 _! read1data [13] $end
$var wire 1 `! read1data [12] $end
$var wire 1 a! read1data [11] $end
$var wire 1 b! read1data [10] $end
$var wire 1 c! read1data [9] $end
$var wire 1 d! read1data [8] $end
$var wire 1 e! read1data [7] $end
$var wire 1 f! read1data [6] $end
$var wire 1 g! read1data [5] $end
$var wire 1 h! read1data [4] $end
$var wire 1 i! read1data [3] $end
$var wire 1 j! read1data [2] $end
$var wire 1 k! read1data [1] $end
$var wire 1 l! read1data [0] $end
$var wire 1 m! read2data [15] $end
$var wire 1 n! read2data [14] $end
$var wire 1 o! read2data [13] $end
$var wire 1 p! read2data [12] $end
$var wire 1 q! read2data [11] $end
$var wire 1 r! read2data [10] $end
$var wire 1 s! read2data [9] $end
$var wire 1 t! read2data [8] $end
$var wire 1 u! read2data [7] $end
$var wire 1 v! read2data [6] $end
$var wire 1 w! read2data [5] $end
$var wire 1 x! read2data [4] $end
$var wire 1 y! read2data [3] $end
$var wire 1 z! read2data [2] $end
$var wire 1 {! read2data [1] $end
$var wire 1 |! read2data [0] $end
$var wire 1 | err $end
$var reg 1 u" err_r $end
$var wire 1 v" in0 [15] $end
$var wire 1 w" in0 [14] $end
$var wire 1 x" in0 [13] $end
$var wire 1 y" in0 [12] $end
$var wire 1 z" in0 [11] $end
$var wire 1 {" in0 [10] $end
$var wire 1 |" in0 [9] $end
$var wire 1 }" in0 [8] $end
$var wire 1 ~" in0 [7] $end
$var wire 1 !# in0 [6] $end
$var wire 1 "# in0 [5] $end
$var wire 1 ## in0 [4] $end
$var wire 1 $# in0 [3] $end
$var wire 1 %# in0 [2] $end
$var wire 1 &# in0 [1] $end
$var wire 1 '# in0 [0] $end
$var wire 1 (# in1 [15] $end
$var wire 1 )# in1 [14] $end
$var wire 1 *# in1 [13] $end
$var wire 1 +# in1 [12] $end
$var wire 1 ,# in1 [11] $end
$var wire 1 -# in1 [10] $end
$var wire 1 .# in1 [9] $end
$var wire 1 /# in1 [8] $end
$var wire 1 0# in1 [7] $end
$var wire 1 1# in1 [6] $end
$var wire 1 2# in1 [5] $end
$var wire 1 3# in1 [4] $end
$var wire 1 4# in1 [3] $end
$var wire 1 5# in1 [2] $end
$var wire 1 6# in1 [1] $end
$var wire 1 7# in1 [0] $end
$var wire 1 8# in2 [15] $end
$var wire 1 9# in2 [14] $end
$var wire 1 :# in2 [13] $end
$var wire 1 ;# in2 [12] $end
$var wire 1 <# in2 [11] $end
$var wire 1 =# in2 [10] $end
$var wire 1 ># in2 [9] $end
$var wire 1 ?# in2 [8] $end
$var wire 1 @# in2 [7] $end
$var wire 1 A# in2 [6] $end
$var wire 1 B# in2 [5] $end
$var wire 1 C# in2 [4] $end
$var wire 1 D# in2 [3] $end
$var wire 1 E# in2 [2] $end
$var wire 1 F# in2 [1] $end
$var wire 1 G# in2 [0] $end
$var wire 1 H# in3 [15] $end
$var wire 1 I# in3 [14] $end
$var wire 1 J# in3 [13] $end
$var wire 1 K# in3 [12] $end
$var wire 1 L# in3 [11] $end
$var wire 1 M# in3 [10] $end
$var wire 1 N# in3 [9] $end
$var wire 1 O# in3 [8] $end
$var wire 1 P# in3 [7] $end
$var wire 1 Q# in3 [6] $end
$var wire 1 R# in3 [5] $end
$var wire 1 S# in3 [4] $end
$var wire 1 T# in3 [3] $end
$var wire 1 U# in3 [2] $end
$var wire 1 V# in3 [1] $end
$var wire 1 W# in3 [0] $end
$var wire 1 X# in4 [15] $end
$var wire 1 Y# in4 [14] $end
$var wire 1 Z# in4 [13] $end
$var wire 1 [# in4 [12] $end
$var wire 1 \# in4 [11] $end
$var wire 1 ]# in4 [10] $end
$var wire 1 ^# in4 [9] $end
$var wire 1 _# in4 [8] $end
$var wire 1 `# in4 [7] $end
$var wire 1 a# in4 [6] $end
$var wire 1 b# in4 [5] $end
$var wire 1 c# in4 [4] $end
$var wire 1 d# in4 [3] $end
$var wire 1 e# in4 [2] $end
$var wire 1 f# in4 [1] $end
$var wire 1 g# in4 [0] $end
$var wire 1 h# in5 [15] $end
$var wire 1 i# in5 [14] $end
$var wire 1 j# in5 [13] $end
$var wire 1 k# in5 [12] $end
$var wire 1 l# in5 [11] $end
$var wire 1 m# in5 [10] $end
$var wire 1 n# in5 [9] $end
$var wire 1 o# in5 [8] $end
$var wire 1 p# in5 [7] $end
$var wire 1 q# in5 [6] $end
$var wire 1 r# in5 [5] $end
$var wire 1 s# in5 [4] $end
$var wire 1 t# in5 [3] $end
$var wire 1 u# in5 [2] $end
$var wire 1 v# in5 [1] $end
$var wire 1 w# in5 [0] $end
$var wire 1 x# in6 [15] $end
$var wire 1 y# in6 [14] $end
$var wire 1 z# in6 [13] $end
$var wire 1 {# in6 [12] $end
$var wire 1 |# in6 [11] $end
$var wire 1 }# in6 [10] $end
$var wire 1 ~# in6 [9] $end
$var wire 1 !$ in6 [8] $end
$var wire 1 "$ in6 [7] $end
$var wire 1 #$ in6 [6] $end
$var wire 1 $$ in6 [5] $end
$var wire 1 %$ in6 [4] $end
$var wire 1 &$ in6 [3] $end
$var wire 1 '$ in6 [2] $end
$var wire 1 ($ in6 [1] $end
$var wire 1 )$ in6 [0] $end
$var wire 1 *$ in7 [15] $end
$var wire 1 +$ in7 [14] $end
$var wire 1 ,$ in7 [13] $end
$var wire 1 -$ in7 [12] $end
$var wire 1 .$ in7 [11] $end
$var wire 1 /$ in7 [10] $end
$var wire 1 0$ in7 [9] $end
$var wire 1 1$ in7 [8] $end
$var wire 1 2$ in7 [7] $end
$var wire 1 3$ in7 [6] $end
$var wire 1 4$ in7 [5] $end
$var wire 1 5$ in7 [4] $end
$var wire 1 6$ in7 [3] $end
$var wire 1 7$ in7 [2] $end
$var wire 1 8$ in7 [1] $end
$var wire 1 9$ in7 [0] $end
$var wire 1 :$ out0 [15] $end
$var wire 1 ;$ out0 [14] $end
$var wire 1 <$ out0 [13] $end
$var wire 1 =$ out0 [12] $end
$var wire 1 >$ out0 [11] $end
$var wire 1 ?$ out0 [10] $end
$var wire 1 @$ out0 [9] $end
$var wire 1 A$ out0 [8] $end
$var wire 1 B$ out0 [7] $end
$var wire 1 C$ out0 [6] $end
$var wire 1 D$ out0 [5] $end
$var wire 1 E$ out0 [4] $end
$var wire 1 F$ out0 [3] $end
$var wire 1 G$ out0 [2] $end
$var wire 1 H$ out0 [1] $end
$var wire 1 I$ out0 [0] $end
$var wire 1 J$ out1 [15] $end
$var wire 1 K$ out1 [14] $end
$var wire 1 L$ out1 [13] $end
$var wire 1 M$ out1 [12] $end
$var wire 1 N$ out1 [11] $end
$var wire 1 O$ out1 [10] $end
$var wire 1 P$ out1 [9] $end
$var wire 1 Q$ out1 [8] $end
$var wire 1 R$ out1 [7] $end
$var wire 1 S$ out1 [6] $end
$var wire 1 T$ out1 [5] $end
$var wire 1 U$ out1 [4] $end
$var wire 1 V$ out1 [3] $end
$var wire 1 W$ out1 [2] $end
$var wire 1 X$ out1 [1] $end
$var wire 1 Y$ out1 [0] $end
$var wire 1 Z$ out2 [15] $end
$var wire 1 [$ out2 [14] $end
$var wire 1 \$ out2 [13] $end
$var wire 1 ]$ out2 [12] $end
$var wire 1 ^$ out2 [11] $end
$var wire 1 _$ out2 [10] $end
$var wire 1 `$ out2 [9] $end
$var wire 1 a$ out2 [8] $end
$var wire 1 b$ out2 [7] $end
$var wire 1 c$ out2 [6] $end
$var wire 1 d$ out2 [5] $end
$var wire 1 e$ out2 [4] $end
$var wire 1 f$ out2 [3] $end
$var wire 1 g$ out2 [2] $end
$var wire 1 h$ out2 [1] $end
$var wire 1 i$ out2 [0] $end
$var wire 1 j$ out3 [15] $end
$var wire 1 k$ out3 [14] $end
$var wire 1 l$ out3 [13] $end
$var wire 1 m$ out3 [12] $end
$var wire 1 n$ out3 [11] $end
$var wire 1 o$ out3 [10] $end
$var wire 1 p$ out3 [9] $end
$var wire 1 q$ out3 [8] $end
$var wire 1 r$ out3 [7] $end
$var wire 1 s$ out3 [6] $end
$var wire 1 t$ out3 [5] $end
$var wire 1 u$ out3 [4] $end
$var wire 1 v$ out3 [3] $end
$var wire 1 w$ out3 [2] $end
$var wire 1 x$ out3 [1] $end
$var wire 1 y$ out3 [0] $end
$var wire 1 z$ out4 [15] $end
$var wire 1 {$ out4 [14] $end
$var wire 1 |$ out4 [13] $end
$var wire 1 }$ out4 [12] $end
$var wire 1 ~$ out4 [11] $end
$var wire 1 !% out4 [10] $end
$var wire 1 "% out4 [9] $end
$var wire 1 #% out4 [8] $end
$var wire 1 $% out4 [7] $end
$var wire 1 %% out4 [6] $end
$var wire 1 &% out4 [5] $end
$var wire 1 '% out4 [4] $end
$var wire 1 (% out4 [3] $end
$var wire 1 )% out4 [2] $end
$var wire 1 *% out4 [1] $end
$var wire 1 +% out4 [0] $end
$var wire 1 ,% out5 [15] $end
$var wire 1 -% out5 [14] $end
$var wire 1 .% out5 [13] $end
$var wire 1 /% out5 [12] $end
$var wire 1 0% out5 [11] $end
$var wire 1 1% out5 [10] $end
$var wire 1 2% out5 [9] $end
$var wire 1 3% out5 [8] $end
$var wire 1 4% out5 [7] $end
$var wire 1 5% out5 [6] $end
$var wire 1 6% out5 [5] $end
$var wire 1 7% out5 [4] $end
$var wire 1 8% out5 [3] $end
$var wire 1 9% out5 [2] $end
$var wire 1 :% out5 [1] $end
$var wire 1 ;% out5 [0] $end
$var wire 1 <% out6 [15] $end
$var wire 1 =% out6 [14] $end
$var wire 1 >% out6 [13] $end
$var wire 1 ?% out6 [12] $end
$var wire 1 @% out6 [11] $end
$var wire 1 A% out6 [10] $end
$var wire 1 B% out6 [9] $end
$var wire 1 C% out6 [8] $end
$var wire 1 D% out6 [7] $end
$var wire 1 E% out6 [6] $end
$var wire 1 F% out6 [5] $end
$var wire 1 G% out6 [4] $end
$var wire 1 H% out6 [3] $end
$var wire 1 I% out6 [2] $end
$var wire 1 J% out6 [1] $end
$var wire 1 K% out6 [0] $end
$var wire 1 L% out7 [15] $end
$var wire 1 M% out7 [14] $end
$var wire 1 N% out7 [13] $end
$var wire 1 O% out7 [12] $end
$var wire 1 P% out7 [11] $end
$var wire 1 Q% out7 [10] $end
$var wire 1 R% out7 [9] $end
$var wire 1 S% out7 [8] $end
$var wire 1 T% out7 [7] $end
$var wire 1 U% out7 [6] $end
$var wire 1 V% out7 [5] $end
$var wire 1 W% out7 [4] $end
$var wire 1 X% out7 [3] $end
$var wire 1 Y% out7 [2] $end
$var wire 1 Z% out7 [1] $end
$var wire 1 [% out7 [0] $end

$scope module R0[15] $end
$var wire 1 :$ q $end
$var wire 1 v" d $end
$var wire 1 \% clk $end
$var wire 1 ]% rst $end
$var reg 1 ^% state $end
$upscope $end

$scope module R0[14] $end
$var wire 1 ;$ q $end
$var wire 1 w" d $end
$var wire 1 _% clk $end
$var wire 1 `% rst $end
$var reg 1 a% state $end
$upscope $end

$scope module R0[13] $end
$var wire 1 <$ q $end
$var wire 1 x" d $end
$var wire 1 b% clk $end
$var wire 1 c% rst $end
$var reg 1 d% state $end
$upscope $end

$scope module R0[12] $end
$var wire 1 =$ q $end
$var wire 1 y" d $end
$var wire 1 e% clk $end
$var wire 1 f% rst $end
$var reg 1 g% state $end
$upscope $end

$scope module R0[11] $end
$var wire 1 >$ q $end
$var wire 1 z" d $end
$var wire 1 h% clk $end
$var wire 1 i% rst $end
$var reg 1 j% state $end
$upscope $end

$scope module R0[10] $end
$var wire 1 ?$ q $end
$var wire 1 {" d $end
$var wire 1 k% clk $end
$var wire 1 l% rst $end
$var reg 1 m% state $end
$upscope $end

$scope module R0[9] $end
$var wire 1 @$ q $end
$var wire 1 |" d $end
$var wire 1 n% clk $end
$var wire 1 o% rst $end
$var reg 1 p% state $end
$upscope $end

$scope module R0[8] $end
$var wire 1 A$ q $end
$var wire 1 }" d $end
$var wire 1 q% clk $end
$var wire 1 r% rst $end
$var reg 1 s% state $end
$upscope $end

$scope module R0[7] $end
$var wire 1 B$ q $end
$var wire 1 ~" d $end
$var wire 1 t% clk $end
$var wire 1 u% rst $end
$var reg 1 v% state $end
$upscope $end

$scope module R0[6] $end
$var wire 1 C$ q $end
$var wire 1 !# d $end
$var wire 1 w% clk $end
$var wire 1 x% rst $end
$var reg 1 y% state $end
$upscope $end

$scope module R0[5] $end
$var wire 1 D$ q $end
$var wire 1 "# d $end
$var wire 1 z% clk $end
$var wire 1 {% rst $end
$var reg 1 |% state $end
$upscope $end

$scope module R0[4] $end
$var wire 1 E$ q $end
$var wire 1 ## d $end
$var wire 1 }% clk $end
$var wire 1 ~% rst $end
$var reg 1 !& state $end
$upscope $end

$scope module R0[3] $end
$var wire 1 F$ q $end
$var wire 1 $# d $end
$var wire 1 "& clk $end
$var wire 1 #& rst $end
$var reg 1 $& state $end
$upscope $end

$scope module R0[2] $end
$var wire 1 G$ q $end
$var wire 1 %# d $end
$var wire 1 %& clk $end
$var wire 1 && rst $end
$var reg 1 '& state $end
$upscope $end

$scope module R0[1] $end
$var wire 1 H$ q $end
$var wire 1 &# d $end
$var wire 1 (& clk $end
$var wire 1 )& rst $end
$var reg 1 *& state $end
$upscope $end

$scope module R0[0] $end
$var wire 1 I$ q $end
$var wire 1 '# d $end
$var wire 1 +& clk $end
$var wire 1 ,& rst $end
$var reg 1 -& state $end
$upscope $end

$scope module R1[15] $end
$var wire 1 J$ q $end
$var wire 1 (# d $end
$var wire 1 .& clk $end
$var wire 1 /& rst $end
$var reg 1 0& state $end
$upscope $end

$scope module R1[14] $end
$var wire 1 K$ q $end
$var wire 1 )# d $end
$var wire 1 1& clk $end
$var wire 1 2& rst $end
$var reg 1 3& state $end
$upscope $end

$scope module R1[13] $end
$var wire 1 L$ q $end
$var wire 1 *# d $end
$var wire 1 4& clk $end
$var wire 1 5& rst $end
$var reg 1 6& state $end
$upscope $end

$scope module R1[12] $end
$var wire 1 M$ q $end
$var wire 1 +# d $end
$var wire 1 7& clk $end
$var wire 1 8& rst $end
$var reg 1 9& state $end
$upscope $end

$scope module R1[11] $end
$var wire 1 N$ q $end
$var wire 1 ,# d $end
$var wire 1 :& clk $end
$var wire 1 ;& rst $end
$var reg 1 <& state $end
$upscope $end

$scope module R1[10] $end
$var wire 1 O$ q $end
$var wire 1 -# d $end
$var wire 1 =& clk $end
$var wire 1 >& rst $end
$var reg 1 ?& state $end
$upscope $end

$scope module R1[9] $end
$var wire 1 P$ q $end
$var wire 1 .# d $end
$var wire 1 @& clk $end
$var wire 1 A& rst $end
$var reg 1 B& state $end
$upscope $end

$scope module R1[8] $end
$var wire 1 Q$ q $end
$var wire 1 /# d $end
$var wire 1 C& clk $end
$var wire 1 D& rst $end
$var reg 1 E& state $end
$upscope $end

$scope module R1[7] $end
$var wire 1 R$ q $end
$var wire 1 0# d $end
$var wire 1 F& clk $end
$var wire 1 G& rst $end
$var reg 1 H& state $end
$upscope $end

$scope module R1[6] $end
$var wire 1 S$ q $end
$var wire 1 1# d $end
$var wire 1 I& clk $end
$var wire 1 J& rst $end
$var reg 1 K& state $end
$upscope $end

$scope module R1[5] $end
$var wire 1 T$ q $end
$var wire 1 2# d $end
$var wire 1 L& clk $end
$var wire 1 M& rst $end
$var reg 1 N& state $end
$upscope $end

$scope module R1[4] $end
$var wire 1 U$ q $end
$var wire 1 3# d $end
$var wire 1 O& clk $end
$var wire 1 P& rst $end
$var reg 1 Q& state $end
$upscope $end

$scope module R1[3] $end
$var wire 1 V$ q $end
$var wire 1 4# d $end
$var wire 1 R& clk $end
$var wire 1 S& rst $end
$var reg 1 T& state $end
$upscope $end

$scope module R1[2] $end
$var wire 1 W$ q $end
$var wire 1 5# d $end
$var wire 1 U& clk $end
$var wire 1 V& rst $end
$var reg 1 W& state $end
$upscope $end

$scope module R1[1] $end
$var wire 1 X$ q $end
$var wire 1 6# d $end
$var wire 1 X& clk $end
$var wire 1 Y& rst $end
$var reg 1 Z& state $end
$upscope $end

$scope module R1[0] $end
$var wire 1 Y$ q $end
$var wire 1 7# d $end
$var wire 1 [& clk $end
$var wire 1 \& rst $end
$var reg 1 ]& state $end
$upscope $end

$scope module R2[15] $end
$var wire 1 Z$ q $end
$var wire 1 8# d $end
$var wire 1 ^& clk $end
$var wire 1 _& rst $end
$var reg 1 `& state $end
$upscope $end

$scope module R2[14] $end
$var wire 1 [$ q $end
$var wire 1 9# d $end
$var wire 1 a& clk $end
$var wire 1 b& rst $end
$var reg 1 c& state $end
$upscope $end

$scope module R2[13] $end
$var wire 1 \$ q $end
$var wire 1 :# d $end
$var wire 1 d& clk $end
$var wire 1 e& rst $end
$var reg 1 f& state $end
$upscope $end

$scope module R2[12] $end
$var wire 1 ]$ q $end
$var wire 1 ;# d $end
$var wire 1 g& clk $end
$var wire 1 h& rst $end
$var reg 1 i& state $end
$upscope $end

$scope module R2[11] $end
$var wire 1 ^$ q $end
$var wire 1 <# d $end
$var wire 1 j& clk $end
$var wire 1 k& rst $end
$var reg 1 l& state $end
$upscope $end

$scope module R2[10] $end
$var wire 1 _$ q $end
$var wire 1 =# d $end
$var wire 1 m& clk $end
$var wire 1 n& rst $end
$var reg 1 o& state $end
$upscope $end

$scope module R2[9] $end
$var wire 1 `$ q $end
$var wire 1 ># d $end
$var wire 1 p& clk $end
$var wire 1 q& rst $end
$var reg 1 r& state $end
$upscope $end

$scope module R2[8] $end
$var wire 1 a$ q $end
$var wire 1 ?# d $end
$var wire 1 s& clk $end
$var wire 1 t& rst $end
$var reg 1 u& state $end
$upscope $end

$scope module R2[7] $end
$var wire 1 b$ q $end
$var wire 1 @# d $end
$var wire 1 v& clk $end
$var wire 1 w& rst $end
$var reg 1 x& state $end
$upscope $end

$scope module R2[6] $end
$var wire 1 c$ q $end
$var wire 1 A# d $end
$var wire 1 y& clk $end
$var wire 1 z& rst $end
$var reg 1 {& state $end
$upscope $end

$scope module R2[5] $end
$var wire 1 d$ q $end
$var wire 1 B# d $end
$var wire 1 |& clk $end
$var wire 1 }& rst $end
$var reg 1 ~& state $end
$upscope $end

$scope module R2[4] $end
$var wire 1 e$ q $end
$var wire 1 C# d $end
$var wire 1 !' clk $end
$var wire 1 "' rst $end
$var reg 1 #' state $end
$upscope $end

$scope module R2[3] $end
$var wire 1 f$ q $end
$var wire 1 D# d $end
$var wire 1 $' clk $end
$var wire 1 %' rst $end
$var reg 1 &' state $end
$upscope $end

$scope module R2[2] $end
$var wire 1 g$ q $end
$var wire 1 E# d $end
$var wire 1 '' clk $end
$var wire 1 (' rst $end
$var reg 1 )' state $end
$upscope $end

$scope module R2[1] $end
$var wire 1 h$ q $end
$var wire 1 F# d $end
$var wire 1 *' clk $end
$var wire 1 +' rst $end
$var reg 1 ,' state $end
$upscope $end

$scope module R2[0] $end
$var wire 1 i$ q $end
$var wire 1 G# d $end
$var wire 1 -' clk $end
$var wire 1 .' rst $end
$var reg 1 /' state $end
$upscope $end

$scope module R3[15] $end
$var wire 1 j$ q $end
$var wire 1 H# d $end
$var wire 1 0' clk $end
$var wire 1 1' rst $end
$var reg 1 2' state $end
$upscope $end

$scope module R3[14] $end
$var wire 1 k$ q $end
$var wire 1 I# d $end
$var wire 1 3' clk $end
$var wire 1 4' rst $end
$var reg 1 5' state $end
$upscope $end

$scope module R3[13] $end
$var wire 1 l$ q $end
$var wire 1 J# d $end
$var wire 1 6' clk $end
$var wire 1 7' rst $end
$var reg 1 8' state $end
$upscope $end

$scope module R3[12] $end
$var wire 1 m$ q $end
$var wire 1 K# d $end
$var wire 1 9' clk $end
$var wire 1 :' rst $end
$var reg 1 ;' state $end
$upscope $end

$scope module R3[11] $end
$var wire 1 n$ q $end
$var wire 1 L# d $end
$var wire 1 <' clk $end
$var wire 1 =' rst $end
$var reg 1 >' state $end
$upscope $end

$scope module R3[10] $end
$var wire 1 o$ q $end
$var wire 1 M# d $end
$var wire 1 ?' clk $end
$var wire 1 @' rst $end
$var reg 1 A' state $end
$upscope $end

$scope module R3[9] $end
$var wire 1 p$ q $end
$var wire 1 N# d $end
$var wire 1 B' clk $end
$var wire 1 C' rst $end
$var reg 1 D' state $end
$upscope $end

$scope module R3[8] $end
$var wire 1 q$ q $end
$var wire 1 O# d $end
$var wire 1 E' clk $end
$var wire 1 F' rst $end
$var reg 1 G' state $end
$upscope $end

$scope module R3[7] $end
$var wire 1 r$ q $end
$var wire 1 P# d $end
$var wire 1 H' clk $end
$var wire 1 I' rst $end
$var reg 1 J' state $end
$upscope $end

$scope module R3[6] $end
$var wire 1 s$ q $end
$var wire 1 Q# d $end
$var wire 1 K' clk $end
$var wire 1 L' rst $end
$var reg 1 M' state $end
$upscope $end

$scope module R3[5] $end
$var wire 1 t$ q $end
$var wire 1 R# d $end
$var wire 1 N' clk $end
$var wire 1 O' rst $end
$var reg 1 P' state $end
$upscope $end

$scope module R3[4] $end
$var wire 1 u$ q $end
$var wire 1 S# d $end
$var wire 1 Q' clk $end
$var wire 1 R' rst $end
$var reg 1 S' state $end
$upscope $end

$scope module R3[3] $end
$var wire 1 v$ q $end
$var wire 1 T# d $end
$var wire 1 T' clk $end
$var wire 1 U' rst $end
$var reg 1 V' state $end
$upscope $end

$scope module R3[2] $end
$var wire 1 w$ q $end
$var wire 1 U# d $end
$var wire 1 W' clk $end
$var wire 1 X' rst $end
$var reg 1 Y' state $end
$upscope $end

$scope module R3[1] $end
$var wire 1 x$ q $end
$var wire 1 V# d $end
$var wire 1 Z' clk $end
$var wire 1 [' rst $end
$var reg 1 \' state $end
$upscope $end

$scope module R3[0] $end
$var wire 1 y$ q $end
$var wire 1 W# d $end
$var wire 1 ]' clk $end
$var wire 1 ^' rst $end
$var reg 1 _' state $end
$upscope $end

$scope module R4[15] $end
$var wire 1 z$ q $end
$var wire 1 X# d $end
$var wire 1 `' clk $end
$var wire 1 a' rst $end
$var reg 1 b' state $end
$upscope $end

$scope module R4[14] $end
$var wire 1 {$ q $end
$var wire 1 Y# d $end
$var wire 1 c' clk $end
$var wire 1 d' rst $end
$var reg 1 e' state $end
$upscope $end

$scope module R4[13] $end
$var wire 1 |$ q $end
$var wire 1 Z# d $end
$var wire 1 f' clk $end
$var wire 1 g' rst $end
$var reg 1 h' state $end
$upscope $end

$scope module R4[12] $end
$var wire 1 }$ q $end
$var wire 1 [# d $end
$var wire 1 i' clk $end
$var wire 1 j' rst $end
$var reg 1 k' state $end
$upscope $end

$scope module R4[11] $end
$var wire 1 ~$ q $end
$var wire 1 \# d $end
$var wire 1 l' clk $end
$var wire 1 m' rst $end
$var reg 1 n' state $end
$upscope $end

$scope module R4[10] $end
$var wire 1 !% q $end
$var wire 1 ]# d $end
$var wire 1 o' clk $end
$var wire 1 p' rst $end
$var reg 1 q' state $end
$upscope $end

$scope module R4[9] $end
$var wire 1 "% q $end
$var wire 1 ^# d $end
$var wire 1 r' clk $end
$var wire 1 s' rst $end
$var reg 1 t' state $end
$upscope $end

$scope module R4[8] $end
$var wire 1 #% q $end
$var wire 1 _# d $end
$var wire 1 u' clk $end
$var wire 1 v' rst $end
$var reg 1 w' state $end
$upscope $end

$scope module R4[7] $end
$var wire 1 $% q $end
$var wire 1 `# d $end
$var wire 1 x' clk $end
$var wire 1 y' rst $end
$var reg 1 z' state $end
$upscope $end

$scope module R4[6] $end
$var wire 1 %% q $end
$var wire 1 a# d $end
$var wire 1 {' clk $end
$var wire 1 |' rst $end
$var reg 1 }' state $end
$upscope $end

$scope module R4[5] $end
$var wire 1 &% q $end
$var wire 1 b# d $end
$var wire 1 ~' clk $end
$var wire 1 !( rst $end
$var reg 1 "( state $end
$upscope $end

$scope module R4[4] $end
$var wire 1 '% q $end
$var wire 1 c# d $end
$var wire 1 #( clk $end
$var wire 1 $( rst $end
$var reg 1 %( state $end
$upscope $end

$scope module R4[3] $end
$var wire 1 (% q $end
$var wire 1 d# d $end
$var wire 1 &( clk $end
$var wire 1 '( rst $end
$var reg 1 (( state $end
$upscope $end

$scope module R4[2] $end
$var wire 1 )% q $end
$var wire 1 e# d $end
$var wire 1 )( clk $end
$var wire 1 *( rst $end
$var reg 1 +( state $end
$upscope $end

$scope module R4[1] $end
$var wire 1 *% q $end
$var wire 1 f# d $end
$var wire 1 ,( clk $end
$var wire 1 -( rst $end
$var reg 1 .( state $end
$upscope $end

$scope module R4[0] $end
$var wire 1 +% q $end
$var wire 1 g# d $end
$var wire 1 /( clk $end
$var wire 1 0( rst $end
$var reg 1 1( state $end
$upscope $end

$scope module R5[15] $end
$var wire 1 ,% q $end
$var wire 1 h# d $end
$var wire 1 2( clk $end
$var wire 1 3( rst $end
$var reg 1 4( state $end
$upscope $end

$scope module R5[14] $end
$var wire 1 -% q $end
$var wire 1 i# d $end
$var wire 1 5( clk $end
$var wire 1 6( rst $end
$var reg 1 7( state $end
$upscope $end

$scope module R5[13] $end
$var wire 1 .% q $end
$var wire 1 j# d $end
$var wire 1 8( clk $end
$var wire 1 9( rst $end
$var reg 1 :( state $end
$upscope $end

$scope module R5[12] $end
$var wire 1 /% q $end
$var wire 1 k# d $end
$var wire 1 ;( clk $end
$var wire 1 <( rst $end
$var reg 1 =( state $end
$upscope $end

$scope module R5[11] $end
$var wire 1 0% q $end
$var wire 1 l# d $end
$var wire 1 >( clk $end
$var wire 1 ?( rst $end
$var reg 1 @( state $end
$upscope $end

$scope module R5[10] $end
$var wire 1 1% q $end
$var wire 1 m# d $end
$var wire 1 A( clk $end
$var wire 1 B( rst $end
$var reg 1 C( state $end
$upscope $end

$scope module R5[9] $end
$var wire 1 2% q $end
$var wire 1 n# d $end
$var wire 1 D( clk $end
$var wire 1 E( rst $end
$var reg 1 F( state $end
$upscope $end

$scope module R5[8] $end
$var wire 1 3% q $end
$var wire 1 o# d $end
$var wire 1 G( clk $end
$var wire 1 H( rst $end
$var reg 1 I( state $end
$upscope $end

$scope module R5[7] $end
$var wire 1 4% q $end
$var wire 1 p# d $end
$var wire 1 J( clk $end
$var wire 1 K( rst $end
$var reg 1 L( state $end
$upscope $end

$scope module R5[6] $end
$var wire 1 5% q $end
$var wire 1 q# d $end
$var wire 1 M( clk $end
$var wire 1 N( rst $end
$var reg 1 O( state $end
$upscope $end

$scope module R5[5] $end
$var wire 1 6% q $end
$var wire 1 r# d $end
$var wire 1 P( clk $end
$var wire 1 Q( rst $end
$var reg 1 R( state $end
$upscope $end

$scope module R5[4] $end
$var wire 1 7% q $end
$var wire 1 s# d $end
$var wire 1 S( clk $end
$var wire 1 T( rst $end
$var reg 1 U( state $end
$upscope $end

$scope module R5[3] $end
$var wire 1 8% q $end
$var wire 1 t# d $end
$var wire 1 V( clk $end
$var wire 1 W( rst $end
$var reg 1 X( state $end
$upscope $end

$scope module R5[2] $end
$var wire 1 9% q $end
$var wire 1 u# d $end
$var wire 1 Y( clk $end
$var wire 1 Z( rst $end
$var reg 1 [( state $end
$upscope $end

$scope module R5[1] $end
$var wire 1 :% q $end
$var wire 1 v# d $end
$var wire 1 \( clk $end
$var wire 1 ]( rst $end
$var reg 1 ^( state $end
$upscope $end

$scope module R5[0] $end
$var wire 1 ;% q $end
$var wire 1 w# d $end
$var wire 1 _( clk $end
$var wire 1 `( rst $end
$var reg 1 a( state $end
$upscope $end

$scope module R6[15] $end
$var wire 1 <% q $end
$var wire 1 x# d $end
$var wire 1 b( clk $end
$var wire 1 c( rst $end
$var reg 1 d( state $end
$upscope $end

$scope module R6[14] $end
$var wire 1 =% q $end
$var wire 1 y# d $end
$var wire 1 e( clk $end
$var wire 1 f( rst $end
$var reg 1 g( state $end
$upscope $end

$scope module R6[13] $end
$var wire 1 >% q $end
$var wire 1 z# d $end
$var wire 1 h( clk $end
$var wire 1 i( rst $end
$var reg 1 j( state $end
$upscope $end

$scope module R6[12] $end
$var wire 1 ?% q $end
$var wire 1 {# d $end
$var wire 1 k( clk $end
$var wire 1 l( rst $end
$var reg 1 m( state $end
$upscope $end

$scope module R6[11] $end
$var wire 1 @% q $end
$var wire 1 |# d $end
$var wire 1 n( clk $end
$var wire 1 o( rst $end
$var reg 1 p( state $end
$upscope $end

$scope module R6[10] $end
$var wire 1 A% q $end
$var wire 1 }# d $end
$var wire 1 q( clk $end
$var wire 1 r( rst $end
$var reg 1 s( state $end
$upscope $end

$scope module R6[9] $end
$var wire 1 B% q $end
$var wire 1 ~# d $end
$var wire 1 t( clk $end
$var wire 1 u( rst $end
$var reg 1 v( state $end
$upscope $end

$scope module R6[8] $end
$var wire 1 C% q $end
$var wire 1 !$ d $end
$var wire 1 w( clk $end
$var wire 1 x( rst $end
$var reg 1 y( state $end
$upscope $end

$scope module R6[7] $end
$var wire 1 D% q $end
$var wire 1 "$ d $end
$var wire 1 z( clk $end
$var wire 1 {( rst $end
$var reg 1 |( state $end
$upscope $end

$scope module R6[6] $end
$var wire 1 E% q $end
$var wire 1 #$ d $end
$var wire 1 }( clk $end
$var wire 1 ~( rst $end
$var reg 1 !) state $end
$upscope $end

$scope module R6[5] $end
$var wire 1 F% q $end
$var wire 1 $$ d $end
$var wire 1 ") clk $end
$var wire 1 #) rst $end
$var reg 1 $) state $end
$upscope $end

$scope module R6[4] $end
$var wire 1 G% q $end
$var wire 1 %$ d $end
$var wire 1 %) clk $end
$var wire 1 &) rst $end
$var reg 1 ') state $end
$upscope $end

$scope module R6[3] $end
$var wire 1 H% q $end
$var wire 1 &$ d $end
$var wire 1 () clk $end
$var wire 1 )) rst $end
$var reg 1 *) state $end
$upscope $end

$scope module R6[2] $end
$var wire 1 I% q $end
$var wire 1 '$ d $end
$var wire 1 +) clk $end
$var wire 1 ,) rst $end
$var reg 1 -) state $end
$upscope $end

$scope module R6[1] $end
$var wire 1 J% q $end
$var wire 1 ($ d $end
$var wire 1 .) clk $end
$var wire 1 /) rst $end
$var reg 1 0) state $end
$upscope $end

$scope module R6[0] $end
$var wire 1 K% q $end
$var wire 1 )$ d $end
$var wire 1 1) clk $end
$var wire 1 2) rst $end
$var reg 1 3) state $end
$upscope $end

$scope module R7[15] $end
$var wire 1 L% q $end
$var wire 1 *$ d $end
$var wire 1 4) clk $end
$var wire 1 5) rst $end
$var reg 1 6) state $end
$upscope $end

$scope module R7[14] $end
$var wire 1 M% q $end
$var wire 1 +$ d $end
$var wire 1 7) clk $end
$var wire 1 8) rst $end
$var reg 1 9) state $end
$upscope $end

$scope module R7[13] $end
$var wire 1 N% q $end
$var wire 1 ,$ d $end
$var wire 1 :) clk $end
$var wire 1 ;) rst $end
$var reg 1 <) state $end
$upscope $end

$scope module R7[12] $end
$var wire 1 O% q $end
$var wire 1 -$ d $end
$var wire 1 =) clk $end
$var wire 1 >) rst $end
$var reg 1 ?) state $end
$upscope $end

$scope module R7[11] $end
$var wire 1 P% q $end
$var wire 1 .$ d $end
$var wire 1 @) clk $end
$var wire 1 A) rst $end
$var reg 1 B) state $end
$upscope $end

$scope module R7[10] $end
$var wire 1 Q% q $end
$var wire 1 /$ d $end
$var wire 1 C) clk $end
$var wire 1 D) rst $end
$var reg 1 E) state $end
$upscope $end

$scope module R7[9] $end
$var wire 1 R% q $end
$var wire 1 0$ d $end
$var wire 1 F) clk $end
$var wire 1 G) rst $end
$var reg 1 H) state $end
$upscope $end

$scope module R7[8] $end
$var wire 1 S% q $end
$var wire 1 1$ d $end
$var wire 1 I) clk $end
$var wire 1 J) rst $end
$var reg 1 K) state $end
$upscope $end

$scope module R7[7] $end
$var wire 1 T% q $end
$var wire 1 2$ d $end
$var wire 1 L) clk $end
$var wire 1 M) rst $end
$var reg 1 N) state $end
$upscope $end

$scope module R7[6] $end
$var wire 1 U% q $end
$var wire 1 3$ d $end
$var wire 1 O) clk $end
$var wire 1 P) rst $end
$var reg 1 Q) state $end
$upscope $end

$scope module R7[5] $end
$var wire 1 V% q $end
$var wire 1 4$ d $end
$var wire 1 R) clk $end
$var wire 1 S) rst $end
$var reg 1 T) state $end
$upscope $end

$scope module R7[4] $end
$var wire 1 W% q $end
$var wire 1 5$ d $end
$var wire 1 U) clk $end
$var wire 1 V) rst $end
$var reg 1 W) state $end
$upscope $end

$scope module R7[3] $end
$var wire 1 X% q $end
$var wire 1 6$ d $end
$var wire 1 X) clk $end
$var wire 1 Y) rst $end
$var reg 1 Z) state $end
$upscope $end

$scope module R7[2] $end
$var wire 1 Y% q $end
$var wire 1 7$ d $end
$var wire 1 [) clk $end
$var wire 1 \) rst $end
$var reg 1 ]) state $end
$upscope $end

$scope module R7[1] $end
$var wire 1 Z% q $end
$var wire 1 8$ d $end
$var wire 1 ^) clk $end
$var wire 1 _) rst $end
$var reg 1 `) state $end
$upscope $end

$scope module R7[0] $end
$var wire 1 [% q $end
$var wire 1 9$ d $end
$var wire 1 a) clk $end
$var wire 1 b) rst $end
$var reg 1 c) state $end
$upscope $end
$upscope $end

$scope module iFETCH $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var wire 1 e" beq_imm [15] $end
$var wire 1 f" beq_imm [14] $end
$var wire 1 g" beq_imm [13] $end
$var wire 1 h" beq_imm [12] $end
$var wire 1 i" beq_imm [11] $end
$var wire 1 j" beq_imm [10] $end
$var wire 1 k" beq_imm [9] $end
$var wire 1 l" beq_imm [8] $end
$var wire 1 m" beq_imm [7] $end
$var wire 1 n" beq_imm [6] $end
$var wire 1 o" beq_imm [5] $end
$var wire 1 p" beq_imm [4] $end
$var wire 1 q" beq_imm [3] $end
$var wire 1 r" beq_imm [2] $end
$var wire 1 s" beq_imm [1] $end
$var wire 1 t" beq_imm [0] $end
$var wire 1 | err $end
$var wire 1 0" instr [15] $end
$var wire 1 1" instr [14] $end
$var wire 1 2" instr [13] $end
$var wire 1 3" instr [12] $end
$var wire 1 4" instr [11] $end
$var wire 1 5" instr [10] $end
$var wire 1 6" instr [9] $end
$var wire 1 7" instr [8] $end
$var wire 1 8" instr [7] $end
$var wire 1 9" instr [6] $end
$var wire 1 :" instr [5] $end
$var wire 1 ;" instr [4] $end
$var wire 1 <" instr [3] $end
$var wire 1 =" instr [2] $end
$var wire 1 >" instr [1] $end
$var wire 1 ?" instr [0] $end
$var wire 1 d) pcPrev_w [15] $end
$var wire 1 e) pcPrev_w [14] $end
$var wire 1 f) pcPrev_w [13] $end
$var wire 1 g) pcPrev_w [12] $end
$var wire 1 h) pcPrev_w [11] $end
$var wire 1 i) pcPrev_w [10] $end
$var wire 1 j) pcPrev_w [9] $end
$var wire 1 k) pcPrev_w [8] $end
$var wire 1 l) pcPrev_w [7] $end
$var wire 1 m) pcPrev_w [6] $end
$var wire 1 n) pcPrev_w [5] $end
$var wire 1 o) pcPrev_w [4] $end
$var wire 1 p) pcPrev_w [3] $end
$var wire 1 q) pcPrev_w [2] $end
$var wire 1 r) pcPrev_w [1] $end
$var wire 1 s) pcPrev_w [0] $end
$var reg 16 t) A [15:0] $end
$var reg 16 u) B [15:0] $end
$var wire 1 v) S [15] $end
$var wire 1 w) S [14] $end
$var wire 1 x) S [13] $end
$var wire 1 y) S [12] $end
$var wire 1 z) S [11] $end
$var wire 1 {) S [10] $end
$var wire 1 |) S [9] $end
$var wire 1 }) S [8] $end
$var wire 1 ~) S [7] $end
$var wire 1 !* S [6] $end
$var wire 1 "* S [5] $end
$var wire 1 #* S [4] $end
$var wire 1 $* S [3] $end
$var wire 1 %* S [2] $end
$var wire 1 &* S [1] $end
$var wire 1 '* S [0] $end
$var wire 1 (* pc [15] $end
$var wire 1 )* pc [14] $end
$var wire 1 ** pc [13] $end
$var wire 1 +* pc [12] $end
$var wire 1 ,* pc [11] $end
$var wire 1 -* pc [10] $end
$var wire 1 .* pc [9] $end
$var wire 1 /* pc [8] $end
$var wire 1 0* pc [7] $end
$var wire 1 1* pc [6] $end
$var wire 1 2* pc [5] $end
$var wire 1 3* pc [4] $end
$var wire 1 4* pc [3] $end
$var wire 1 5* pc [2] $end
$var wire 1 6* pc [1] $end
$var wire 1 7* pc [0] $end
$var wire 1 8* Cout1 $end
$var wire 1 9* Cout2 $end
$var wire 1 :* pc_fetch [15] $end
$var wire 1 ;* pc_fetch [14] $end
$var wire 1 <* pc_fetch [13] $end
$var wire 1 =* pc_fetch [12] $end
$var wire 1 >* pc_fetch [11] $end
$var wire 1 ?* pc_fetch [10] $end
$var wire 1 @* pc_fetch [9] $end
$var wire 1 A* pc_fetch [8] $end
$var wire 1 B* pc_fetch [7] $end
$var wire 1 C* pc_fetch [6] $end
$var wire 1 D* pc_fetch [5] $end
$var wire 1 E* pc_fetch [4] $end
$var wire 1 F* pc_fetch [3] $end
$var wire 1 G* pc_fetch [2] $end
$var wire 1 H* pc_fetch [1] $end
$var wire 1 I* pc_fetch [0] $end
$var wire 1 J* pc_u [15] $end
$var wire 1 K* pc_u [14] $end
$var wire 1 L* pc_u [13] $end
$var wire 1 M* pc_u [12] $end
$var wire 1 N* pc_u [11] $end
$var wire 1 O* pc_u [10] $end
$var wire 1 P* pc_u [9] $end
$var wire 1 Q* pc_u [8] $end
$var wire 1 R* pc_u [7] $end
$var wire 1 S* pc_u [6] $end
$var wire 1 T* pc_u [5] $end
$var wire 1 U* pc_u [4] $end
$var wire 1 V* pc_u [3] $end
$var wire 1 W* pc_u [2] $end
$var wire 1 X* pc_u [1] $end
$var wire 1 Y* pc_u [0] $end
$var wire 1 Z* pc_beqmod [15] $end
$var wire 1 [* pc_beqmod [14] $end
$var wire 1 \* pc_beqmod [13] $end
$var wire 1 ]* pc_beqmod [12] $end
$var wire 1 ^* pc_beqmod [11] $end
$var wire 1 _* pc_beqmod [10] $end
$var wire 1 `* pc_beqmod [9] $end
$var wire 1 a* pc_beqmod [8] $end
$var wire 1 b* pc_beqmod [7] $end
$var wire 1 c* pc_beqmod [6] $end
$var wire 1 d* pc_beqmod [5] $end
$var wire 1 e* pc_beqmod [4] $end
$var wire 1 f* pc_beqmod [3] $end
$var wire 1 g* pc_beqmod [2] $end
$var wire 1 h* pc_beqmod [1] $end
$var wire 1 i* pc_beqmod [0] $end

$scope module iMEM $end
$var wire 1 0" data_out [15] $end
$var wire 1 1" data_out [14] $end
$var wire 1 2" data_out [13] $end
$var wire 1 3" data_out [12] $end
$var wire 1 4" data_out [11] $end
$var wire 1 5" data_out [10] $end
$var wire 1 6" data_out [9] $end
$var wire 1 7" data_out [8] $end
$var wire 1 8" data_out [7] $end
$var wire 1 9" data_out [6] $end
$var wire 1 :" data_out [5] $end
$var wire 1 ;" data_out [4] $end
$var wire 1 <" data_out [3] $end
$var wire 1 =" data_out [2] $end
$var wire 1 >" data_out [1] $end
$var wire 1 ?" data_out [0] $end
$var wire 1 j* data_in [15] $end
$var wire 1 k* data_in [14] $end
$var wire 1 l* data_in [13] $end
$var wire 1 m* data_in [12] $end
$var wire 1 n* data_in [11] $end
$var wire 1 o* data_in [10] $end
$var wire 1 p* data_in [9] $end
$var wire 1 q* data_in [8] $end
$var wire 1 r* data_in [7] $end
$var wire 1 s* data_in [6] $end
$var wire 1 t* data_in [5] $end
$var wire 1 u* data_in [4] $end
$var wire 1 v* data_in [3] $end
$var wire 1 w* data_in [2] $end
$var wire 1 x* data_in [1] $end
$var wire 1 y* data_in [0] $end
$var wire 1 :* addr [15] $end
$var wire 1 ;* addr [14] $end
$var wire 1 <* addr [13] $end
$var wire 1 =* addr [12] $end
$var wire 1 >* addr [11] $end
$var wire 1 ?* addr [10] $end
$var wire 1 @* addr [9] $end
$var wire 1 A* addr [8] $end
$var wire 1 B* addr [7] $end
$var wire 1 C* addr [6] $end
$var wire 1 D* addr [5] $end
$var wire 1 E* addr [4] $end
$var wire 1 F* addr [3] $end
$var wire 1 G* addr [2] $end
$var wire 1 H* addr [1] $end
$var wire 1 I* addr [0] $end
$var wire 1 z* enable $end
$var wire 1 {* wr $end
$var wire 1 |* createdump $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 }* loaded $end
$var reg 17 ~* largest [16:0] $end
$var integer 32 !+ mcd $end
$var integer 32 "+ i $end
$upscope $end

$scope module iFULLADDER1 $end
$var wire 1 :* A [15] $end
$var wire 1 ;* A [14] $end
$var wire 1 <* A [13] $end
$var wire 1 =* A [12] $end
$var wire 1 >* A [11] $end
$var wire 1 ?* A [10] $end
$var wire 1 @* A [9] $end
$var wire 1 A* A [8] $end
$var wire 1 B* A [7] $end
$var wire 1 C* A [6] $end
$var wire 1 D* A [5] $end
$var wire 1 E* A [4] $end
$var wire 1 F* A [3] $end
$var wire 1 G* A [2] $end
$var wire 1 H* A [1] $end
$var wire 1 I* A [0] $end
$var wire 1 #+ B [15] $end
$var wire 1 $+ B [14] $end
$var wire 1 %+ B [13] $end
$var wire 1 &+ B [12] $end
$var wire 1 '+ B [11] $end
$var wire 1 (+ B [10] $end
$var wire 1 )+ B [9] $end
$var wire 1 *+ B [8] $end
$var wire 1 ++ B [7] $end
$var wire 1 ,+ B [6] $end
$var wire 1 -+ B [5] $end
$var wire 1 .+ B [4] $end
$var wire 1 /+ B [3] $end
$var wire 1 0+ B [2] $end
$var wire 1 1+ B [1] $end
$var wire 1 2+ B [0] $end
$var wire 1 J* S [15] $end
$var wire 1 K* S [14] $end
$var wire 1 L* S [13] $end
$var wire 1 M* S [12] $end
$var wire 1 N* S [11] $end
$var wire 1 O* S [10] $end
$var wire 1 P* S [9] $end
$var wire 1 Q* S [8] $end
$var wire 1 R* S [7] $end
$var wire 1 S* S [6] $end
$var wire 1 T* S [5] $end
$var wire 1 U* S [4] $end
$var wire 1 V* S [3] $end
$var wire 1 W* S [2] $end
$var wire 1 X* S [1] $end
$var wire 1 Y* S [0] $end
$var wire 1 8* Cout $end
$var wire 1 3+ Cout1 $end
$var wire 1 4+ Cout2 $end
$var wire 1 5+ Cout3 $end

$scope module iADDER1 $end
$var wire 1 F* A [3] $end
$var wire 1 G* A [2] $end
$var wire 1 H* A [1] $end
$var wire 1 I* A [0] $end
$var wire 1 /+ B [3] $end
$var wire 1 0+ B [2] $end
$var wire 1 1+ B [1] $end
$var wire 1 2+ B [0] $end
$var wire 1 6+ Cin $end
$var wire 1 V* S [3] $end
$var wire 1 W* S [2] $end
$var wire 1 X* S [1] $end
$var wire 1 Y* S [0] $end
$var wire 1 3+ Cout $end
$var wire 1 7+ Cout1 $end
$var wire 1 8+ Cout2 $end
$var wire 1 9+ Cout3 $end

$scope module iADDER1 $end
$var wire 1 I* A $end
$var wire 1 2+ B $end
$var wire 1 6+ Cin $end
$var wire 1 Y* S $end
$var wire 1 7+ Cout $end
$var wire 1 :+ xor1_out $end
$var wire 1 ;+ xor2_out $end
$var wire 1 <+ nand1_out $end
$var wire 1 =+ nand2_out $end
$var wire 1 >+ not1_out $end
$var wire 1 ?+ not2_out $end
$var wire 1 @+ nor1_out $end
$var wire 1 A+ not3_out $end

$scope module iXOR1 $end
$var wire 1 I* in1 $end
$var wire 1 2+ in2 $end
$var wire 1 :+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 :+ in1 $end
$var wire 1 6+ in2 $end
$var wire 1 Y* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 :+ in1 $end
$var wire 1 6+ in2 $end
$var wire 1 <+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 <+ in1 $end
$var wire 1 >+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 I* in1 $end
$var wire 1 2+ in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 =+ in1 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 >+ in1 $end
$var wire 1 ?+ in2 $end
$var wire 1 @+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 @+ in1 $end
$var wire 1 7+ out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 H* A $end
$var wire 1 1+ B $end
$var wire 1 7+ Cin $end
$var wire 1 X* S $end
$var wire 1 8+ Cout $end
$var wire 1 B+ xor1_out $end
$var wire 1 C+ xor2_out $end
$var wire 1 D+ nand1_out $end
$var wire 1 E+ nand2_out $end
$var wire 1 F+ not1_out $end
$var wire 1 G+ not2_out $end
$var wire 1 H+ nor1_out $end
$var wire 1 I+ not3_out $end

$scope module iXOR1 $end
$var wire 1 H* in1 $end
$var wire 1 1+ in2 $end
$var wire 1 B+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 B+ in1 $end
$var wire 1 7+ in2 $end
$var wire 1 X* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 B+ in1 $end
$var wire 1 7+ in2 $end
$var wire 1 D+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 D+ in1 $end
$var wire 1 F+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 H* in1 $end
$var wire 1 1+ in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 E+ in1 $end
$var wire 1 G+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 F+ in1 $end
$var wire 1 G+ in2 $end
$var wire 1 H+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 H+ in1 $end
$var wire 1 8+ out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 G* A $end
$var wire 1 0+ B $end
$var wire 1 8+ Cin $end
$var wire 1 W* S $end
$var wire 1 9+ Cout $end
$var wire 1 J+ xor1_out $end
$var wire 1 K+ xor2_out $end
$var wire 1 L+ nand1_out $end
$var wire 1 M+ nand2_out $end
$var wire 1 N+ not1_out $end
$var wire 1 O+ not2_out $end
$var wire 1 P+ nor1_out $end
$var wire 1 Q+ not3_out $end

$scope module iXOR1 $end
$var wire 1 G* in1 $end
$var wire 1 0+ in2 $end
$var wire 1 J+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 J+ in1 $end
$var wire 1 8+ in2 $end
$var wire 1 W* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 J+ in1 $end
$var wire 1 8+ in2 $end
$var wire 1 L+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 L+ in1 $end
$var wire 1 N+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 G* in1 $end
$var wire 1 0+ in2 $end
$var wire 1 M+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 M+ in1 $end
$var wire 1 O+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 N+ in1 $end
$var wire 1 O+ in2 $end
$var wire 1 P+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 P+ in1 $end
$var wire 1 9+ out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 F* A $end
$var wire 1 /+ B $end
$var wire 1 9+ Cin $end
$var wire 1 V* S $end
$var wire 1 3+ Cout $end
$var wire 1 R+ xor1_out $end
$var wire 1 S+ xor2_out $end
$var wire 1 T+ nand1_out $end
$var wire 1 U+ nand2_out $end
$var wire 1 V+ not1_out $end
$var wire 1 W+ not2_out $end
$var wire 1 X+ nor1_out $end
$var wire 1 Y+ not3_out $end

$scope module iXOR1 $end
$var wire 1 F* in1 $end
$var wire 1 /+ in2 $end
$var wire 1 R+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 R+ in1 $end
$var wire 1 9+ in2 $end
$var wire 1 V* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 R+ in1 $end
$var wire 1 9+ in2 $end
$var wire 1 T+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 T+ in1 $end
$var wire 1 V+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 F* in1 $end
$var wire 1 /+ in2 $end
$var wire 1 U+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 U+ in1 $end
$var wire 1 W+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 V+ in1 $end
$var wire 1 W+ in2 $end
$var wire 1 X+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 X+ in1 $end
$var wire 1 3+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 B* A [3] $end
$var wire 1 C* A [2] $end
$var wire 1 D* A [1] $end
$var wire 1 E* A [0] $end
$var wire 1 ++ B [3] $end
$var wire 1 ,+ B [2] $end
$var wire 1 -+ B [1] $end
$var wire 1 .+ B [0] $end
$var wire 1 3+ Cin $end
$var wire 1 R* S [3] $end
$var wire 1 S* S [2] $end
$var wire 1 T* S [1] $end
$var wire 1 U* S [0] $end
$var wire 1 4+ Cout $end
$var wire 1 Z+ Cout1 $end
$var wire 1 [+ Cout2 $end
$var wire 1 \+ Cout3 $end

$scope module iADDER1 $end
$var wire 1 E* A $end
$var wire 1 .+ B $end
$var wire 1 3+ Cin $end
$var wire 1 U* S $end
$var wire 1 Z+ Cout $end
$var wire 1 ]+ xor1_out $end
$var wire 1 ^+ xor2_out $end
$var wire 1 _+ nand1_out $end
$var wire 1 `+ nand2_out $end
$var wire 1 a+ not1_out $end
$var wire 1 b+ not2_out $end
$var wire 1 c+ nor1_out $end
$var wire 1 d+ not3_out $end

$scope module iXOR1 $end
$var wire 1 E* in1 $end
$var wire 1 .+ in2 $end
$var wire 1 ]+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ]+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ]+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 _+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 _+ in1 $end
$var wire 1 a+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 E* in1 $end
$var wire 1 .+ in2 $end
$var wire 1 `+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 `+ in1 $end
$var wire 1 b+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 a+ in1 $end
$var wire 1 b+ in2 $end
$var wire 1 c+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 c+ in1 $end
$var wire 1 Z+ out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 D* A $end
$var wire 1 -+ B $end
$var wire 1 Z+ Cin $end
$var wire 1 T* S $end
$var wire 1 [+ Cout $end
$var wire 1 e+ xor1_out $end
$var wire 1 f+ xor2_out $end
$var wire 1 g+ nand1_out $end
$var wire 1 h+ nand2_out $end
$var wire 1 i+ not1_out $end
$var wire 1 j+ not2_out $end
$var wire 1 k+ nor1_out $end
$var wire 1 l+ not3_out $end

$scope module iXOR1 $end
$var wire 1 D* in1 $end
$var wire 1 -+ in2 $end
$var wire 1 e+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 e+ in1 $end
$var wire 1 Z+ in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 e+ in1 $end
$var wire 1 Z+ in2 $end
$var wire 1 g+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 g+ in1 $end
$var wire 1 i+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 D* in1 $end
$var wire 1 -+ in2 $end
$var wire 1 h+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 h+ in1 $end
$var wire 1 j+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 i+ in1 $end
$var wire 1 j+ in2 $end
$var wire 1 k+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 k+ in1 $end
$var wire 1 [+ out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 C* A $end
$var wire 1 ,+ B $end
$var wire 1 [+ Cin $end
$var wire 1 S* S $end
$var wire 1 \+ Cout $end
$var wire 1 m+ xor1_out $end
$var wire 1 n+ xor2_out $end
$var wire 1 o+ nand1_out $end
$var wire 1 p+ nand2_out $end
$var wire 1 q+ not1_out $end
$var wire 1 r+ not2_out $end
$var wire 1 s+ nor1_out $end
$var wire 1 t+ not3_out $end

$scope module iXOR1 $end
$var wire 1 C* in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 m+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 m+ in1 $end
$var wire 1 [+ in2 $end
$var wire 1 S* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 m+ in1 $end
$var wire 1 [+ in2 $end
$var wire 1 o+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 o+ in1 $end
$var wire 1 q+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 C* in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 p+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 p+ in1 $end
$var wire 1 r+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 q+ in1 $end
$var wire 1 r+ in2 $end
$var wire 1 s+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 s+ in1 $end
$var wire 1 \+ out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 B* A $end
$var wire 1 ++ B $end
$var wire 1 \+ Cin $end
$var wire 1 R* S $end
$var wire 1 4+ Cout $end
$var wire 1 u+ xor1_out $end
$var wire 1 v+ xor2_out $end
$var wire 1 w+ nand1_out $end
$var wire 1 x+ nand2_out $end
$var wire 1 y+ not1_out $end
$var wire 1 z+ not2_out $end
$var wire 1 {+ nor1_out $end
$var wire 1 |+ not3_out $end

$scope module iXOR1 $end
$var wire 1 B* in1 $end
$var wire 1 ++ in2 $end
$var wire 1 u+ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 u+ in1 $end
$var wire 1 \+ in2 $end
$var wire 1 R* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 u+ in1 $end
$var wire 1 \+ in2 $end
$var wire 1 w+ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 w+ in1 $end
$var wire 1 y+ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 B* in1 $end
$var wire 1 ++ in2 $end
$var wire 1 x+ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 x+ in1 $end
$var wire 1 z+ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 y+ in1 $end
$var wire 1 z+ in2 $end
$var wire 1 {+ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 {+ in1 $end
$var wire 1 4+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 >* A [3] $end
$var wire 1 ?* A [2] $end
$var wire 1 @* A [1] $end
$var wire 1 A* A [0] $end
$var wire 1 '+ B [3] $end
$var wire 1 (+ B [2] $end
$var wire 1 )+ B [1] $end
$var wire 1 *+ B [0] $end
$var wire 1 4+ Cin $end
$var wire 1 N* S [3] $end
$var wire 1 O* S [2] $end
$var wire 1 P* S [1] $end
$var wire 1 Q* S [0] $end
$var wire 1 5+ Cout $end
$var wire 1 }+ Cout1 $end
$var wire 1 ~+ Cout2 $end
$var wire 1 !, Cout3 $end

$scope module iADDER1 $end
$var wire 1 A* A $end
$var wire 1 *+ B $end
$var wire 1 4+ Cin $end
$var wire 1 Q* S $end
$var wire 1 }+ Cout $end
$var wire 1 ", xor1_out $end
$var wire 1 #, xor2_out $end
$var wire 1 $, nand1_out $end
$var wire 1 %, nand2_out $end
$var wire 1 &, not1_out $end
$var wire 1 ', not2_out $end
$var wire 1 (, nor1_out $end
$var wire 1 ), not3_out $end

$scope module iXOR1 $end
$var wire 1 A* in1 $end
$var wire 1 *+ in2 $end
$var wire 1 ", out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ", in1 $end
$var wire 1 4+ in2 $end
$var wire 1 Q* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ", in1 $end
$var wire 1 4+ in2 $end
$var wire 1 $, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 $, in1 $end
$var wire 1 &, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 A* in1 $end
$var wire 1 *+ in2 $end
$var wire 1 %, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 %, in1 $end
$var wire 1 ', out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 &, in1 $end
$var wire 1 ', in2 $end
$var wire 1 (, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 (, in1 $end
$var wire 1 }+ out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 @* A $end
$var wire 1 )+ B $end
$var wire 1 }+ Cin $end
$var wire 1 P* S $end
$var wire 1 ~+ Cout $end
$var wire 1 *, xor1_out $end
$var wire 1 +, xor2_out $end
$var wire 1 ,, nand1_out $end
$var wire 1 -, nand2_out $end
$var wire 1 ., not1_out $end
$var wire 1 /, not2_out $end
$var wire 1 0, nor1_out $end
$var wire 1 1, not3_out $end

$scope module iXOR1 $end
$var wire 1 @* in1 $end
$var wire 1 )+ in2 $end
$var wire 1 *, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 *, in1 $end
$var wire 1 }+ in2 $end
$var wire 1 P* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 *, in1 $end
$var wire 1 }+ in2 $end
$var wire 1 ,, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 ,, in1 $end
$var wire 1 ., out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 @* in1 $end
$var wire 1 )+ in2 $end
$var wire 1 -, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 -, in1 $end
$var wire 1 /, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 ., in1 $end
$var wire 1 /, in2 $end
$var wire 1 0, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 0, in1 $end
$var wire 1 ~+ out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 ?* A $end
$var wire 1 (+ B $end
$var wire 1 ~+ Cin $end
$var wire 1 O* S $end
$var wire 1 !, Cout $end
$var wire 1 2, xor1_out $end
$var wire 1 3, xor2_out $end
$var wire 1 4, nand1_out $end
$var wire 1 5, nand2_out $end
$var wire 1 6, not1_out $end
$var wire 1 7, not2_out $end
$var wire 1 8, nor1_out $end
$var wire 1 9, not3_out $end

$scope module iXOR1 $end
$var wire 1 ?* in1 $end
$var wire 1 (+ in2 $end
$var wire 1 2, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 2, in1 $end
$var wire 1 ~+ in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 2, in1 $end
$var wire 1 ~+ in2 $end
$var wire 1 4, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 4, in1 $end
$var wire 1 6, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 ?* in1 $end
$var wire 1 (+ in2 $end
$var wire 1 5, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 5, in1 $end
$var wire 1 7, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 6, in1 $end
$var wire 1 7, in2 $end
$var wire 1 8, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 8, in1 $end
$var wire 1 !, out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 >* A $end
$var wire 1 '+ B $end
$var wire 1 !, Cin $end
$var wire 1 N* S $end
$var wire 1 5+ Cout $end
$var wire 1 :, xor1_out $end
$var wire 1 ;, xor2_out $end
$var wire 1 <, nand1_out $end
$var wire 1 =, nand2_out $end
$var wire 1 >, not1_out $end
$var wire 1 ?, not2_out $end
$var wire 1 @, nor1_out $end
$var wire 1 A, not3_out $end

$scope module iXOR1 $end
$var wire 1 >* in1 $end
$var wire 1 '+ in2 $end
$var wire 1 :, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 :, in1 $end
$var wire 1 !, in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 :, in1 $end
$var wire 1 !, in2 $end
$var wire 1 <, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 <, in1 $end
$var wire 1 >, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 >* in1 $end
$var wire 1 '+ in2 $end
$var wire 1 =, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 =, in1 $end
$var wire 1 ?, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 >, in1 $end
$var wire 1 ?, in2 $end
$var wire 1 @, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 @, in1 $end
$var wire 1 5+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 :* A [3] $end
$var wire 1 ;* A [2] $end
$var wire 1 <* A [1] $end
$var wire 1 =* A [0] $end
$var wire 1 #+ B [3] $end
$var wire 1 $+ B [2] $end
$var wire 1 %+ B [1] $end
$var wire 1 &+ B [0] $end
$var wire 1 5+ Cin $end
$var wire 1 J* S [3] $end
$var wire 1 K* S [2] $end
$var wire 1 L* S [1] $end
$var wire 1 M* S [0] $end
$var wire 1 8* Cout $end
$var wire 1 B, Cout1 $end
$var wire 1 C, Cout2 $end
$var wire 1 D, Cout3 $end

$scope module iADDER1 $end
$var wire 1 =* A $end
$var wire 1 &+ B $end
$var wire 1 5+ Cin $end
$var wire 1 M* S $end
$var wire 1 B, Cout $end
$var wire 1 E, xor1_out $end
$var wire 1 F, xor2_out $end
$var wire 1 G, nand1_out $end
$var wire 1 H, nand2_out $end
$var wire 1 I, not1_out $end
$var wire 1 J, not2_out $end
$var wire 1 K, nor1_out $end
$var wire 1 L, not3_out $end

$scope module iXOR1 $end
$var wire 1 =* in1 $end
$var wire 1 &+ in2 $end
$var wire 1 E, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 E, in1 $end
$var wire 1 5+ in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 E, in1 $end
$var wire 1 5+ in2 $end
$var wire 1 G, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 G, in1 $end
$var wire 1 I, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 =* in1 $end
$var wire 1 &+ in2 $end
$var wire 1 H, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 H, in1 $end
$var wire 1 J, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 I, in1 $end
$var wire 1 J, in2 $end
$var wire 1 K, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 K, in1 $end
$var wire 1 B, out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 <* A $end
$var wire 1 %+ B $end
$var wire 1 B, Cin $end
$var wire 1 L* S $end
$var wire 1 C, Cout $end
$var wire 1 M, xor1_out $end
$var wire 1 N, xor2_out $end
$var wire 1 O, nand1_out $end
$var wire 1 P, nand2_out $end
$var wire 1 Q, not1_out $end
$var wire 1 R, not2_out $end
$var wire 1 S, nor1_out $end
$var wire 1 T, not3_out $end

$scope module iXOR1 $end
$var wire 1 <* in1 $end
$var wire 1 %+ in2 $end
$var wire 1 M, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 M, in1 $end
$var wire 1 B, in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 M, in1 $end
$var wire 1 B, in2 $end
$var wire 1 O, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 O, in1 $end
$var wire 1 Q, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 <* in1 $end
$var wire 1 %+ in2 $end
$var wire 1 P, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 P, in1 $end
$var wire 1 R, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 Q, in1 $end
$var wire 1 R, in2 $end
$var wire 1 S, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 S, in1 $end
$var wire 1 C, out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 ;* A $end
$var wire 1 $+ B $end
$var wire 1 C, Cin $end
$var wire 1 K* S $end
$var wire 1 D, Cout $end
$var wire 1 U, xor1_out $end
$var wire 1 V, xor2_out $end
$var wire 1 W, nand1_out $end
$var wire 1 X, nand2_out $end
$var wire 1 Y, not1_out $end
$var wire 1 Z, not2_out $end
$var wire 1 [, nor1_out $end
$var wire 1 \, not3_out $end

$scope module iXOR1 $end
$var wire 1 ;* in1 $end
$var wire 1 $+ in2 $end
$var wire 1 U, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 U, in1 $end
$var wire 1 C, in2 $end
$var wire 1 K* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 U, in1 $end
$var wire 1 C, in2 $end
$var wire 1 W, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 W, in1 $end
$var wire 1 Y, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 ;* in1 $end
$var wire 1 $+ in2 $end
$var wire 1 X, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 X, in1 $end
$var wire 1 Z, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 Y, in1 $end
$var wire 1 Z, in2 $end
$var wire 1 [, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 [, in1 $end
$var wire 1 D, out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 :* A $end
$var wire 1 #+ B $end
$var wire 1 D, Cin $end
$var wire 1 J* S $end
$var wire 1 8* Cout $end
$var wire 1 ], xor1_out $end
$var wire 1 ^, xor2_out $end
$var wire 1 _, nand1_out $end
$var wire 1 `, nand2_out $end
$var wire 1 a, not1_out $end
$var wire 1 b, not2_out $end
$var wire 1 c, nor1_out $end
$var wire 1 d, not3_out $end

$scope module iXOR1 $end
$var wire 1 :* in1 $end
$var wire 1 #+ in2 $end
$var wire 1 ], out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ], in1 $end
$var wire 1 D, in2 $end
$var wire 1 J* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ], in1 $end
$var wire 1 D, in2 $end
$var wire 1 _, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 _, in1 $end
$var wire 1 a, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 :* in1 $end
$var wire 1 #+ in2 $end
$var wire 1 `, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 `, in1 $end
$var wire 1 b, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 a, in1 $end
$var wire 1 b, in2 $end
$var wire 1 c, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 c, in1 $end
$var wire 1 8* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module iFULLADDER2 $end
$var wire 1 J* A [15] $end
$var wire 1 K* A [14] $end
$var wire 1 L* A [13] $end
$var wire 1 M* A [12] $end
$var wire 1 N* A [11] $end
$var wire 1 O* A [10] $end
$var wire 1 P* A [9] $end
$var wire 1 Q* A [8] $end
$var wire 1 R* A [7] $end
$var wire 1 S* A [6] $end
$var wire 1 T* A [5] $end
$var wire 1 U* A [4] $end
$var wire 1 V* A [3] $end
$var wire 1 W* A [2] $end
$var wire 1 X* A [1] $end
$var wire 1 Y* A [0] $end
$var wire 1 e" B [15] $end
$var wire 1 f" B [14] $end
$var wire 1 g" B [13] $end
$var wire 1 h" B [12] $end
$var wire 1 i" B [11] $end
$var wire 1 j" B [10] $end
$var wire 1 k" B [9] $end
$var wire 1 l" B [8] $end
$var wire 1 m" B [7] $end
$var wire 1 n" B [6] $end
$var wire 1 o" B [5] $end
$var wire 1 p" B [4] $end
$var wire 1 q" B [3] $end
$var wire 1 r" B [2] $end
$var wire 1 s" B [1] $end
$var wire 1 t" B [0] $end
$var wire 1 Z* S [15] $end
$var wire 1 [* S [14] $end
$var wire 1 \* S [13] $end
$var wire 1 ]* S [12] $end
$var wire 1 ^* S [11] $end
$var wire 1 _* S [10] $end
$var wire 1 `* S [9] $end
$var wire 1 a* S [8] $end
$var wire 1 b* S [7] $end
$var wire 1 c* S [6] $end
$var wire 1 d* S [5] $end
$var wire 1 e* S [4] $end
$var wire 1 f* S [3] $end
$var wire 1 g* S [2] $end
$var wire 1 h* S [1] $end
$var wire 1 i* S [0] $end
$var wire 1 e, Cout $end
$var wire 1 f, Cout1 $end
$var wire 1 g, Cout2 $end
$var wire 1 h, Cout3 $end

$scope module iADDER1 $end
$var wire 1 V* A [3] $end
$var wire 1 W* A [2] $end
$var wire 1 X* A [1] $end
$var wire 1 Y* A [0] $end
$var wire 1 q" B [3] $end
$var wire 1 r" B [2] $end
$var wire 1 s" B [1] $end
$var wire 1 t" B [0] $end
$var wire 1 i, Cin $end
$var wire 1 f* S [3] $end
$var wire 1 g* S [2] $end
$var wire 1 h* S [1] $end
$var wire 1 i* S [0] $end
$var wire 1 f, Cout $end
$var wire 1 j, Cout1 $end
$var wire 1 k, Cout2 $end
$var wire 1 l, Cout3 $end

$scope module iADDER1 $end
$var wire 1 Y* A $end
$var wire 1 t" B $end
$var wire 1 i, Cin $end
$var wire 1 i* S $end
$var wire 1 j, Cout $end
$var wire 1 m, xor1_out $end
$var wire 1 n, xor2_out $end
$var wire 1 o, nand1_out $end
$var wire 1 p, nand2_out $end
$var wire 1 q, not1_out $end
$var wire 1 r, not2_out $end
$var wire 1 s, nor1_out $end
$var wire 1 t, not3_out $end

$scope module iXOR1 $end
$var wire 1 Y* in1 $end
$var wire 1 t" in2 $end
$var wire 1 m, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 m, in1 $end
$var wire 1 i, in2 $end
$var wire 1 i* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 m, in1 $end
$var wire 1 i, in2 $end
$var wire 1 o, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 o, in1 $end
$var wire 1 q, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 Y* in1 $end
$var wire 1 t" in2 $end
$var wire 1 p, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 p, in1 $end
$var wire 1 r, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 q, in1 $end
$var wire 1 r, in2 $end
$var wire 1 s, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 s, in1 $end
$var wire 1 j, out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 X* A $end
$var wire 1 s" B $end
$var wire 1 j, Cin $end
$var wire 1 h* S $end
$var wire 1 k, Cout $end
$var wire 1 u, xor1_out $end
$var wire 1 v, xor2_out $end
$var wire 1 w, nand1_out $end
$var wire 1 x, nand2_out $end
$var wire 1 y, not1_out $end
$var wire 1 z, not2_out $end
$var wire 1 {, nor1_out $end
$var wire 1 |, not3_out $end

$scope module iXOR1 $end
$var wire 1 X* in1 $end
$var wire 1 s" in2 $end
$var wire 1 u, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 u, in1 $end
$var wire 1 j, in2 $end
$var wire 1 h* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 u, in1 $end
$var wire 1 j, in2 $end
$var wire 1 w, out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 w, in1 $end
$var wire 1 y, out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 X* in1 $end
$var wire 1 s" in2 $end
$var wire 1 x, out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 x, in1 $end
$var wire 1 z, out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 y, in1 $end
$var wire 1 z, in2 $end
$var wire 1 {, out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 {, in1 $end
$var wire 1 k, out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 W* A $end
$var wire 1 r" B $end
$var wire 1 k, Cin $end
$var wire 1 g* S $end
$var wire 1 l, Cout $end
$var wire 1 }, xor1_out $end
$var wire 1 ~, xor2_out $end
$var wire 1 !- nand1_out $end
$var wire 1 "- nand2_out $end
$var wire 1 #- not1_out $end
$var wire 1 $- not2_out $end
$var wire 1 %- nor1_out $end
$var wire 1 &- not3_out $end

$scope module iXOR1 $end
$var wire 1 W* in1 $end
$var wire 1 r" in2 $end
$var wire 1 }, out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 }, in1 $end
$var wire 1 k, in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 }, in1 $end
$var wire 1 k, in2 $end
$var wire 1 !- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 !- in1 $end
$var wire 1 #- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 W* in1 $end
$var wire 1 r" in2 $end
$var wire 1 "- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 "- in1 $end
$var wire 1 $- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 #- in1 $end
$var wire 1 $- in2 $end
$var wire 1 %- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 %- in1 $end
$var wire 1 l, out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 V* A $end
$var wire 1 q" B $end
$var wire 1 l, Cin $end
$var wire 1 f* S $end
$var wire 1 f, Cout $end
$var wire 1 '- xor1_out $end
$var wire 1 (- xor2_out $end
$var wire 1 )- nand1_out $end
$var wire 1 *- nand2_out $end
$var wire 1 +- not1_out $end
$var wire 1 ,- not2_out $end
$var wire 1 -- nor1_out $end
$var wire 1 .- not3_out $end

$scope module iXOR1 $end
$var wire 1 V* in1 $end
$var wire 1 q" in2 $end
$var wire 1 '- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 '- in1 $end
$var wire 1 l, in2 $end
$var wire 1 f* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 '- in1 $end
$var wire 1 l, in2 $end
$var wire 1 )- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 )- in1 $end
$var wire 1 +- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 V* in1 $end
$var wire 1 q" in2 $end
$var wire 1 *- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 *- in1 $end
$var wire 1 ,- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 +- in1 $end
$var wire 1 ,- in2 $end
$var wire 1 -- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 -- in1 $end
$var wire 1 f, out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 R* A [3] $end
$var wire 1 S* A [2] $end
$var wire 1 T* A [1] $end
$var wire 1 U* A [0] $end
$var wire 1 m" B [3] $end
$var wire 1 n" B [2] $end
$var wire 1 o" B [1] $end
$var wire 1 p" B [0] $end
$var wire 1 f, Cin $end
$var wire 1 b* S [3] $end
$var wire 1 c* S [2] $end
$var wire 1 d* S [1] $end
$var wire 1 e* S [0] $end
$var wire 1 g, Cout $end
$var wire 1 /- Cout1 $end
$var wire 1 0- Cout2 $end
$var wire 1 1- Cout3 $end

$scope module iADDER1 $end
$var wire 1 U* A $end
$var wire 1 p" B $end
$var wire 1 f, Cin $end
$var wire 1 e* S $end
$var wire 1 /- Cout $end
$var wire 1 2- xor1_out $end
$var wire 1 3- xor2_out $end
$var wire 1 4- nand1_out $end
$var wire 1 5- nand2_out $end
$var wire 1 6- not1_out $end
$var wire 1 7- not2_out $end
$var wire 1 8- nor1_out $end
$var wire 1 9- not3_out $end

$scope module iXOR1 $end
$var wire 1 U* in1 $end
$var wire 1 p" in2 $end
$var wire 1 2- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 2- in1 $end
$var wire 1 f, in2 $end
$var wire 1 e* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 2- in1 $end
$var wire 1 f, in2 $end
$var wire 1 4- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 4- in1 $end
$var wire 1 6- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 U* in1 $end
$var wire 1 p" in2 $end
$var wire 1 5- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 5- in1 $end
$var wire 1 7- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 6- in1 $end
$var wire 1 7- in2 $end
$var wire 1 8- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 8- in1 $end
$var wire 1 /- out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 T* A $end
$var wire 1 o" B $end
$var wire 1 /- Cin $end
$var wire 1 d* S $end
$var wire 1 0- Cout $end
$var wire 1 :- xor1_out $end
$var wire 1 ;- xor2_out $end
$var wire 1 <- nand1_out $end
$var wire 1 =- nand2_out $end
$var wire 1 >- not1_out $end
$var wire 1 ?- not2_out $end
$var wire 1 @- nor1_out $end
$var wire 1 A- not3_out $end

$scope module iXOR1 $end
$var wire 1 T* in1 $end
$var wire 1 o" in2 $end
$var wire 1 :- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 :- in1 $end
$var wire 1 /- in2 $end
$var wire 1 d* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 :- in1 $end
$var wire 1 /- in2 $end
$var wire 1 <- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 <- in1 $end
$var wire 1 >- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 T* in1 $end
$var wire 1 o" in2 $end
$var wire 1 =- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 =- in1 $end
$var wire 1 ?- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 >- in1 $end
$var wire 1 ?- in2 $end
$var wire 1 @- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 @- in1 $end
$var wire 1 0- out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 S* A $end
$var wire 1 n" B $end
$var wire 1 0- Cin $end
$var wire 1 c* S $end
$var wire 1 1- Cout $end
$var wire 1 B- xor1_out $end
$var wire 1 C- xor2_out $end
$var wire 1 D- nand1_out $end
$var wire 1 E- nand2_out $end
$var wire 1 F- not1_out $end
$var wire 1 G- not2_out $end
$var wire 1 H- nor1_out $end
$var wire 1 I- not3_out $end

$scope module iXOR1 $end
$var wire 1 S* in1 $end
$var wire 1 n" in2 $end
$var wire 1 B- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 B- in1 $end
$var wire 1 0- in2 $end
$var wire 1 c* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 B- in1 $end
$var wire 1 0- in2 $end
$var wire 1 D- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 D- in1 $end
$var wire 1 F- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 S* in1 $end
$var wire 1 n" in2 $end
$var wire 1 E- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 E- in1 $end
$var wire 1 G- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 F- in1 $end
$var wire 1 G- in2 $end
$var wire 1 H- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 H- in1 $end
$var wire 1 1- out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 R* A $end
$var wire 1 m" B $end
$var wire 1 1- Cin $end
$var wire 1 b* S $end
$var wire 1 g, Cout $end
$var wire 1 J- xor1_out $end
$var wire 1 K- xor2_out $end
$var wire 1 L- nand1_out $end
$var wire 1 M- nand2_out $end
$var wire 1 N- not1_out $end
$var wire 1 O- not2_out $end
$var wire 1 P- nor1_out $end
$var wire 1 Q- not3_out $end

$scope module iXOR1 $end
$var wire 1 R* in1 $end
$var wire 1 m" in2 $end
$var wire 1 J- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 J- in1 $end
$var wire 1 1- in2 $end
$var wire 1 b* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 J- in1 $end
$var wire 1 1- in2 $end
$var wire 1 L- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 L- in1 $end
$var wire 1 N- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 R* in1 $end
$var wire 1 m" in2 $end
$var wire 1 M- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 M- in1 $end
$var wire 1 O- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 N- in1 $end
$var wire 1 O- in2 $end
$var wire 1 P- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 P- in1 $end
$var wire 1 g, out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 N* A [3] $end
$var wire 1 O* A [2] $end
$var wire 1 P* A [1] $end
$var wire 1 Q* A [0] $end
$var wire 1 i" B [3] $end
$var wire 1 j" B [2] $end
$var wire 1 k" B [1] $end
$var wire 1 l" B [0] $end
$var wire 1 g, Cin $end
$var wire 1 ^* S [3] $end
$var wire 1 _* S [2] $end
$var wire 1 `* S [1] $end
$var wire 1 a* S [0] $end
$var wire 1 h, Cout $end
$var wire 1 R- Cout1 $end
$var wire 1 S- Cout2 $end
$var wire 1 T- Cout3 $end

$scope module iADDER1 $end
$var wire 1 Q* A $end
$var wire 1 l" B $end
$var wire 1 g, Cin $end
$var wire 1 a* S $end
$var wire 1 R- Cout $end
$var wire 1 U- xor1_out $end
$var wire 1 V- xor2_out $end
$var wire 1 W- nand1_out $end
$var wire 1 X- nand2_out $end
$var wire 1 Y- not1_out $end
$var wire 1 Z- not2_out $end
$var wire 1 [- nor1_out $end
$var wire 1 \- not3_out $end

$scope module iXOR1 $end
$var wire 1 Q* in1 $end
$var wire 1 l" in2 $end
$var wire 1 U- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 U- in1 $end
$var wire 1 g, in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 U- in1 $end
$var wire 1 g, in2 $end
$var wire 1 W- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 W- in1 $end
$var wire 1 Y- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 Q* in1 $end
$var wire 1 l" in2 $end
$var wire 1 X- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 X- in1 $end
$var wire 1 Z- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 Y- in1 $end
$var wire 1 Z- in2 $end
$var wire 1 [- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 [- in1 $end
$var wire 1 R- out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 P* A $end
$var wire 1 k" B $end
$var wire 1 R- Cin $end
$var wire 1 `* S $end
$var wire 1 S- Cout $end
$var wire 1 ]- xor1_out $end
$var wire 1 ^- xor2_out $end
$var wire 1 _- nand1_out $end
$var wire 1 `- nand2_out $end
$var wire 1 a- not1_out $end
$var wire 1 b- not2_out $end
$var wire 1 c- nor1_out $end
$var wire 1 d- not3_out $end

$scope module iXOR1 $end
$var wire 1 P* in1 $end
$var wire 1 k" in2 $end
$var wire 1 ]- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ]- in1 $end
$var wire 1 R- in2 $end
$var wire 1 `* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ]- in1 $end
$var wire 1 R- in2 $end
$var wire 1 _- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 _- in1 $end
$var wire 1 a- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 P* in1 $end
$var wire 1 k" in2 $end
$var wire 1 `- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 `- in1 $end
$var wire 1 b- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 a- in1 $end
$var wire 1 b- in2 $end
$var wire 1 c- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 c- in1 $end
$var wire 1 S- out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 O* A $end
$var wire 1 j" B $end
$var wire 1 S- Cin $end
$var wire 1 _* S $end
$var wire 1 T- Cout $end
$var wire 1 e- xor1_out $end
$var wire 1 f- xor2_out $end
$var wire 1 g- nand1_out $end
$var wire 1 h- nand2_out $end
$var wire 1 i- not1_out $end
$var wire 1 j- not2_out $end
$var wire 1 k- nor1_out $end
$var wire 1 l- not3_out $end

$scope module iXOR1 $end
$var wire 1 O* in1 $end
$var wire 1 j" in2 $end
$var wire 1 e- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 e- in1 $end
$var wire 1 S- in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 e- in1 $end
$var wire 1 S- in2 $end
$var wire 1 g- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 g- in1 $end
$var wire 1 i- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 O* in1 $end
$var wire 1 j" in2 $end
$var wire 1 h- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 h- in1 $end
$var wire 1 j- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 i- in1 $end
$var wire 1 j- in2 $end
$var wire 1 k- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 k- in1 $end
$var wire 1 T- out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 N* A $end
$var wire 1 i" B $end
$var wire 1 T- Cin $end
$var wire 1 ^* S $end
$var wire 1 h, Cout $end
$var wire 1 m- xor1_out $end
$var wire 1 n- xor2_out $end
$var wire 1 o- nand1_out $end
$var wire 1 p- nand2_out $end
$var wire 1 q- not1_out $end
$var wire 1 r- not2_out $end
$var wire 1 s- nor1_out $end
$var wire 1 t- not3_out $end

$scope module iXOR1 $end
$var wire 1 N* in1 $end
$var wire 1 i" in2 $end
$var wire 1 m- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 m- in1 $end
$var wire 1 T- in2 $end
$var wire 1 ^* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 m- in1 $end
$var wire 1 T- in2 $end
$var wire 1 o- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 o- in1 $end
$var wire 1 q- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 N* in1 $end
$var wire 1 i" in2 $end
$var wire 1 p- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 p- in1 $end
$var wire 1 r- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 q- in1 $end
$var wire 1 r- in2 $end
$var wire 1 s- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 s- in1 $end
$var wire 1 h, out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 J* A [3] $end
$var wire 1 K* A [2] $end
$var wire 1 L* A [1] $end
$var wire 1 M* A [0] $end
$var wire 1 e" B [3] $end
$var wire 1 f" B [2] $end
$var wire 1 g" B [1] $end
$var wire 1 h" B [0] $end
$var wire 1 h, Cin $end
$var wire 1 Z* S [3] $end
$var wire 1 [* S [2] $end
$var wire 1 \* S [1] $end
$var wire 1 ]* S [0] $end
$var wire 1 e, Cout $end
$var wire 1 u- Cout1 $end
$var wire 1 v- Cout2 $end
$var wire 1 w- Cout3 $end

$scope module iADDER1 $end
$var wire 1 M* A $end
$var wire 1 h" B $end
$var wire 1 h, Cin $end
$var wire 1 ]* S $end
$var wire 1 u- Cout $end
$var wire 1 x- xor1_out $end
$var wire 1 y- xor2_out $end
$var wire 1 z- nand1_out $end
$var wire 1 {- nand2_out $end
$var wire 1 |- not1_out $end
$var wire 1 }- not2_out $end
$var wire 1 ~- nor1_out $end
$var wire 1 !. not3_out $end

$scope module iXOR1 $end
$var wire 1 M* in1 $end
$var wire 1 h" in2 $end
$var wire 1 x- out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 x- in1 $end
$var wire 1 h, in2 $end
$var wire 1 ]* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 x- in1 $end
$var wire 1 h, in2 $end
$var wire 1 z- out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 z- in1 $end
$var wire 1 |- out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 M* in1 $end
$var wire 1 h" in2 $end
$var wire 1 {- out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 {- in1 $end
$var wire 1 }- out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 |- in1 $end
$var wire 1 }- in2 $end
$var wire 1 ~- out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 ~- in1 $end
$var wire 1 u- out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 L* A $end
$var wire 1 g" B $end
$var wire 1 u- Cin $end
$var wire 1 \* S $end
$var wire 1 v- Cout $end
$var wire 1 ". xor1_out $end
$var wire 1 #. xor2_out $end
$var wire 1 $. nand1_out $end
$var wire 1 %. nand2_out $end
$var wire 1 &. not1_out $end
$var wire 1 '. not2_out $end
$var wire 1 (. nor1_out $end
$var wire 1 ). not3_out $end

$scope module iXOR1 $end
$var wire 1 L* in1 $end
$var wire 1 g" in2 $end
$var wire 1 ". out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ". in1 $end
$var wire 1 u- in2 $end
$var wire 1 \* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ". in1 $end
$var wire 1 u- in2 $end
$var wire 1 $. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 $. in1 $end
$var wire 1 &. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 L* in1 $end
$var wire 1 g" in2 $end
$var wire 1 %. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 %. in1 $end
$var wire 1 '. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 &. in1 $end
$var wire 1 '. in2 $end
$var wire 1 (. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 (. in1 $end
$var wire 1 v- out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 K* A $end
$var wire 1 f" B $end
$var wire 1 v- Cin $end
$var wire 1 [* S $end
$var wire 1 w- Cout $end
$var wire 1 *. xor1_out $end
$var wire 1 +. xor2_out $end
$var wire 1 ,. nand1_out $end
$var wire 1 -. nand2_out $end
$var wire 1 .. not1_out $end
$var wire 1 /. not2_out $end
$var wire 1 0. nor1_out $end
$var wire 1 1. not3_out $end

$scope module iXOR1 $end
$var wire 1 K* in1 $end
$var wire 1 f" in2 $end
$var wire 1 *. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 *. in1 $end
$var wire 1 v- in2 $end
$var wire 1 [* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 *. in1 $end
$var wire 1 v- in2 $end
$var wire 1 ,. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 ,. in1 $end
$var wire 1 .. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 K* in1 $end
$var wire 1 f" in2 $end
$var wire 1 -. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 -. in1 $end
$var wire 1 /. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 .. in1 $end
$var wire 1 /. in2 $end
$var wire 1 0. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 0. in1 $end
$var wire 1 w- out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 J* A $end
$var wire 1 e" B $end
$var wire 1 w- Cin $end
$var wire 1 Z* S $end
$var wire 1 e, Cout $end
$var wire 1 2. xor1_out $end
$var wire 1 3. xor2_out $end
$var wire 1 4. nand1_out $end
$var wire 1 5. nand2_out $end
$var wire 1 6. not1_out $end
$var wire 1 7. not2_out $end
$var wire 1 8. nor1_out $end
$var wire 1 9. not3_out $end

$scope module iXOR1 $end
$var wire 1 J* in1 $end
$var wire 1 e" in2 $end
$var wire 1 2. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 2. in1 $end
$var wire 1 w- in2 $end
$var wire 1 Z* out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 2. in1 $end
$var wire 1 w- in2 $end
$var wire 1 4. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 4. in1 $end
$var wire 1 6. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 J* in1 $end
$var wire 1 e" in2 $end
$var wire 1 5. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 5. in1 $end
$var wire 1 7. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 6. in1 $end
$var wire 1 7. in2 $end
$var wire 1 8. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 8. in1 $end
$var wire 1 e, out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDFF[15] $end
$var wire 1 :* q $end
$var wire 1 (* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 :. state $end
$upscope $end

$scope module IDFF[14] $end
$var wire 1 ;* q $end
$var wire 1 )* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 ;. state $end
$upscope $end

$scope module IDFF[13] $end
$var wire 1 <* q $end
$var wire 1 ** d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 <. state $end
$upscope $end

$scope module IDFF[12] $end
$var wire 1 =* q $end
$var wire 1 +* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 =. state $end
$upscope $end

$scope module IDFF[11] $end
$var wire 1 >* q $end
$var wire 1 ,* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 >. state $end
$upscope $end

$scope module IDFF[10] $end
$var wire 1 ?* q $end
$var wire 1 -* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 ?. state $end
$upscope $end

$scope module IDFF[9] $end
$var wire 1 @* q $end
$var wire 1 .* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 @. state $end
$upscope $end

$scope module IDFF[8] $end
$var wire 1 A* q $end
$var wire 1 /* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 A. state $end
$upscope $end

$scope module IDFF[7] $end
$var wire 1 B* q $end
$var wire 1 0* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 B. state $end
$upscope $end

$scope module IDFF[6] $end
$var wire 1 C* q $end
$var wire 1 1* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 C. state $end
$upscope $end

$scope module IDFF[5] $end
$var wire 1 D* q $end
$var wire 1 2* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 D. state $end
$upscope $end

$scope module IDFF[4] $end
$var wire 1 E* q $end
$var wire 1 3* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 E. state $end
$upscope $end

$scope module IDFF[3] $end
$var wire 1 F* q $end
$var wire 1 4* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 F. state $end
$upscope $end

$scope module IDFF[2] $end
$var wire 1 G* q $end
$var wire 1 5* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 G. state $end
$upscope $end

$scope module IDFF[1] $end
$var wire 1 H* q $end
$var wire 1 6* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 H. state $end
$upscope $end

$scope module IDFF[0] $end
$var wire 1 I* q $end
$var wire 1 7* d $end
$var wire 1 /" clk $end
$var wire 1 } rst $end
$var reg 1 I. state $end
$upscope $end
$upscope $end

$scope module iADDI_ADDER $end
$var wire 1 }! A [15] $end
$var wire 1 ~! A [14] $end
$var wire 1 !" A [13] $end
$var wire 1 "" A [12] $end
$var wire 1 #" A [11] $end
$var wire 1 $" A [10] $end
$var wire 1 %" A [9] $end
$var wire 1 &" A [8] $end
$var wire 1 '" A [7] $end
$var wire 1 (" A [6] $end
$var wire 1 )" A [5] $end
$var wire 1 *" A [4] $end
$var wire 1 +" A [3] $end
$var wire 1 ," A [2] $end
$var wire 1 -" A [1] $end
$var wire 1 ." A [0] $end
$var wire 1 J. B [15] $end
$var wire 1 K. B [14] $end
$var wire 1 L. B [13] $end
$var wire 1 M. B [12] $end
$var wire 1 N. B [11] $end
$var wire 1 O. B [10] $end
$var wire 1 P. B [9] $end
$var wire 1 Q. B [8] $end
$var wire 1 R. B [7] $end
$var wire 1 S. B [6] $end
$var wire 1 T. B [5] $end
$var wire 1 ;" B [4] $end
$var wire 1 <" B [3] $end
$var wire 1 =" B [2] $end
$var wire 1 >" B [1] $end
$var wire 1 ?" B [0] $end
$var wire 1 L! S [15] $end
$var wire 1 M! S [14] $end
$var wire 1 N! S [13] $end
$var wire 1 O! S [12] $end
$var wire 1 P! S [11] $end
$var wire 1 Q! S [10] $end
$var wire 1 R! S [9] $end
$var wire 1 S! S [8] $end
$var wire 1 T! S [7] $end
$var wire 1 U! S [6] $end
$var wire 1 V! S [5] $end
$var wire 1 W! S [4] $end
$var wire 1 X! S [3] $end
$var wire 1 Y! S [2] $end
$var wire 1 Z! S [1] $end
$var wire 1 [! S [0] $end
$var wire 1 U. Cout $end
$var wire 1 V. Cout1 $end
$var wire 1 W. Cout2 $end
$var wire 1 X. Cout3 $end

$scope module iADDER1 $end
$var wire 1 +" A [3] $end
$var wire 1 ," A [2] $end
$var wire 1 -" A [1] $end
$var wire 1 ." A [0] $end
$var wire 1 <" B [3] $end
$var wire 1 =" B [2] $end
$var wire 1 >" B [1] $end
$var wire 1 ?" B [0] $end
$var wire 1 Y. Cin $end
$var wire 1 X! S [3] $end
$var wire 1 Y! S [2] $end
$var wire 1 Z! S [1] $end
$var wire 1 [! S [0] $end
$var wire 1 V. Cout $end
$var wire 1 Z. Cout1 $end
$var wire 1 [. Cout2 $end
$var wire 1 \. Cout3 $end

$scope module iADDER1 $end
$var wire 1 ." A $end
$var wire 1 ?" B $end
$var wire 1 Y. Cin $end
$var wire 1 [! S $end
$var wire 1 Z. Cout $end
$var wire 1 ]. xor1_out $end
$var wire 1 ^. xor2_out $end
$var wire 1 _. nand1_out $end
$var wire 1 `. nand2_out $end
$var wire 1 a. not1_out $end
$var wire 1 b. not2_out $end
$var wire 1 c. nor1_out $end
$var wire 1 d. not3_out $end

$scope module iXOR1 $end
$var wire 1 ." in1 $end
$var wire 1 ?" in2 $end
$var wire 1 ]. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ]. in1 $end
$var wire 1 Y. in2 $end
$var wire 1 [! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ]. in1 $end
$var wire 1 Y. in2 $end
$var wire 1 _. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 _. in1 $end
$var wire 1 a. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 ." in1 $end
$var wire 1 ?" in2 $end
$var wire 1 `. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 `. in1 $end
$var wire 1 b. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 a. in1 $end
$var wire 1 b. in2 $end
$var wire 1 c. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 c. in1 $end
$var wire 1 Z. out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 -" A $end
$var wire 1 >" B $end
$var wire 1 Z. Cin $end
$var wire 1 Z! S $end
$var wire 1 [. Cout $end
$var wire 1 e. xor1_out $end
$var wire 1 f. xor2_out $end
$var wire 1 g. nand1_out $end
$var wire 1 h. nand2_out $end
$var wire 1 i. not1_out $end
$var wire 1 j. not2_out $end
$var wire 1 k. nor1_out $end
$var wire 1 l. not3_out $end

$scope module iXOR1 $end
$var wire 1 -" in1 $end
$var wire 1 >" in2 $end
$var wire 1 e. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 e. in1 $end
$var wire 1 Z. in2 $end
$var wire 1 Z! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 e. in1 $end
$var wire 1 Z. in2 $end
$var wire 1 g. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 g. in1 $end
$var wire 1 i. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 -" in1 $end
$var wire 1 >" in2 $end
$var wire 1 h. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 h. in1 $end
$var wire 1 j. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 i. in1 $end
$var wire 1 j. in2 $end
$var wire 1 k. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 k. in1 $end
$var wire 1 [. out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 ," A $end
$var wire 1 =" B $end
$var wire 1 [. Cin $end
$var wire 1 Y! S $end
$var wire 1 \. Cout $end
$var wire 1 m. xor1_out $end
$var wire 1 n. xor2_out $end
$var wire 1 o. nand1_out $end
$var wire 1 p. nand2_out $end
$var wire 1 q. not1_out $end
$var wire 1 r. not2_out $end
$var wire 1 s. nor1_out $end
$var wire 1 t. not3_out $end

$scope module iXOR1 $end
$var wire 1 ," in1 $end
$var wire 1 =" in2 $end
$var wire 1 m. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 m. in1 $end
$var wire 1 [. in2 $end
$var wire 1 Y! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 m. in1 $end
$var wire 1 [. in2 $end
$var wire 1 o. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 o. in1 $end
$var wire 1 q. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 ," in1 $end
$var wire 1 =" in2 $end
$var wire 1 p. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 p. in1 $end
$var wire 1 r. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 q. in1 $end
$var wire 1 r. in2 $end
$var wire 1 s. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 s. in1 $end
$var wire 1 \. out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 +" A $end
$var wire 1 <" B $end
$var wire 1 \. Cin $end
$var wire 1 X! S $end
$var wire 1 V. Cout $end
$var wire 1 u. xor1_out $end
$var wire 1 v. xor2_out $end
$var wire 1 w. nand1_out $end
$var wire 1 x. nand2_out $end
$var wire 1 y. not1_out $end
$var wire 1 z. not2_out $end
$var wire 1 {. nor1_out $end
$var wire 1 |. not3_out $end

$scope module iXOR1 $end
$var wire 1 +" in1 $end
$var wire 1 <" in2 $end
$var wire 1 u. out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 u. in1 $end
$var wire 1 \. in2 $end
$var wire 1 X! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 u. in1 $end
$var wire 1 \. in2 $end
$var wire 1 w. out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 w. in1 $end
$var wire 1 y. out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 +" in1 $end
$var wire 1 <" in2 $end
$var wire 1 x. out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 x. in1 $end
$var wire 1 z. out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 y. in1 $end
$var wire 1 z. in2 $end
$var wire 1 {. out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 {. in1 $end
$var wire 1 V. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 '" A [3] $end
$var wire 1 (" A [2] $end
$var wire 1 )" A [1] $end
$var wire 1 *" A [0] $end
$var wire 1 R. B [3] $end
$var wire 1 S. B [2] $end
$var wire 1 T. B [1] $end
$var wire 1 ;" B [0] $end
$var wire 1 V. Cin $end
$var wire 1 T! S [3] $end
$var wire 1 U! S [2] $end
$var wire 1 V! S [1] $end
$var wire 1 W! S [0] $end
$var wire 1 W. Cout $end
$var wire 1 }. Cout1 $end
$var wire 1 ~. Cout2 $end
$var wire 1 !/ Cout3 $end

$scope module iADDER1 $end
$var wire 1 *" A $end
$var wire 1 ;" B $end
$var wire 1 V. Cin $end
$var wire 1 W! S $end
$var wire 1 }. Cout $end
$var wire 1 "/ xor1_out $end
$var wire 1 #/ xor2_out $end
$var wire 1 $/ nand1_out $end
$var wire 1 %/ nand2_out $end
$var wire 1 &/ not1_out $end
$var wire 1 '/ not2_out $end
$var wire 1 (/ nor1_out $end
$var wire 1 )/ not3_out $end

$scope module iXOR1 $end
$var wire 1 *" in1 $end
$var wire 1 ;" in2 $end
$var wire 1 "/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 "/ in1 $end
$var wire 1 V. in2 $end
$var wire 1 W! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 "/ in1 $end
$var wire 1 V. in2 $end
$var wire 1 $/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 $/ in1 $end
$var wire 1 &/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 *" in1 $end
$var wire 1 ;" in2 $end
$var wire 1 %/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 %/ in1 $end
$var wire 1 '/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 &/ in1 $end
$var wire 1 '/ in2 $end
$var wire 1 (/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 (/ in1 $end
$var wire 1 }. out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 )" A $end
$var wire 1 T. B $end
$var wire 1 }. Cin $end
$var wire 1 V! S $end
$var wire 1 ~. Cout $end
$var wire 1 */ xor1_out $end
$var wire 1 +/ xor2_out $end
$var wire 1 ,/ nand1_out $end
$var wire 1 -/ nand2_out $end
$var wire 1 ./ not1_out $end
$var wire 1 // not2_out $end
$var wire 1 0/ nor1_out $end
$var wire 1 1/ not3_out $end

$scope module iXOR1 $end
$var wire 1 )" in1 $end
$var wire 1 T. in2 $end
$var wire 1 */ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 */ in1 $end
$var wire 1 }. in2 $end
$var wire 1 V! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 */ in1 $end
$var wire 1 }. in2 $end
$var wire 1 ,/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 ,/ in1 $end
$var wire 1 ./ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 )" in1 $end
$var wire 1 T. in2 $end
$var wire 1 -/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 -/ in1 $end
$var wire 1 // out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 ./ in1 $end
$var wire 1 // in2 $end
$var wire 1 0/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 0/ in1 $end
$var wire 1 ~. out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 (" A $end
$var wire 1 S. B $end
$var wire 1 ~. Cin $end
$var wire 1 U! S $end
$var wire 1 !/ Cout $end
$var wire 1 2/ xor1_out $end
$var wire 1 3/ xor2_out $end
$var wire 1 4/ nand1_out $end
$var wire 1 5/ nand2_out $end
$var wire 1 6/ not1_out $end
$var wire 1 7/ not2_out $end
$var wire 1 8/ nor1_out $end
$var wire 1 9/ not3_out $end

$scope module iXOR1 $end
$var wire 1 (" in1 $end
$var wire 1 S. in2 $end
$var wire 1 2/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 2/ in1 $end
$var wire 1 ~. in2 $end
$var wire 1 U! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 2/ in1 $end
$var wire 1 ~. in2 $end
$var wire 1 4/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 4/ in1 $end
$var wire 1 6/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 (" in1 $end
$var wire 1 S. in2 $end
$var wire 1 5/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 5/ in1 $end
$var wire 1 7/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 6/ in1 $end
$var wire 1 7/ in2 $end
$var wire 1 8/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 8/ in1 $end
$var wire 1 !/ out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 '" A $end
$var wire 1 R. B $end
$var wire 1 !/ Cin $end
$var wire 1 T! S $end
$var wire 1 W. Cout $end
$var wire 1 :/ xor1_out $end
$var wire 1 ;/ xor2_out $end
$var wire 1 </ nand1_out $end
$var wire 1 =/ nand2_out $end
$var wire 1 >/ not1_out $end
$var wire 1 ?/ not2_out $end
$var wire 1 @/ nor1_out $end
$var wire 1 A/ not3_out $end

$scope module iXOR1 $end
$var wire 1 '" in1 $end
$var wire 1 R. in2 $end
$var wire 1 :/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 :/ in1 $end
$var wire 1 !/ in2 $end
$var wire 1 T! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 :/ in1 $end
$var wire 1 !/ in2 $end
$var wire 1 </ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 </ in1 $end
$var wire 1 >/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 '" in1 $end
$var wire 1 R. in2 $end
$var wire 1 =/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 =/ in1 $end
$var wire 1 ?/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 >/ in1 $end
$var wire 1 ?/ in2 $end
$var wire 1 @/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 @/ in1 $end
$var wire 1 W. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 #" A [3] $end
$var wire 1 $" A [2] $end
$var wire 1 %" A [1] $end
$var wire 1 &" A [0] $end
$var wire 1 N. B [3] $end
$var wire 1 O. B [2] $end
$var wire 1 P. B [1] $end
$var wire 1 Q. B [0] $end
$var wire 1 W. Cin $end
$var wire 1 P! S [3] $end
$var wire 1 Q! S [2] $end
$var wire 1 R! S [1] $end
$var wire 1 S! S [0] $end
$var wire 1 X. Cout $end
$var wire 1 B/ Cout1 $end
$var wire 1 C/ Cout2 $end
$var wire 1 D/ Cout3 $end

$scope module iADDER1 $end
$var wire 1 &" A $end
$var wire 1 Q. B $end
$var wire 1 W. Cin $end
$var wire 1 S! S $end
$var wire 1 B/ Cout $end
$var wire 1 E/ xor1_out $end
$var wire 1 F/ xor2_out $end
$var wire 1 G/ nand1_out $end
$var wire 1 H/ nand2_out $end
$var wire 1 I/ not1_out $end
$var wire 1 J/ not2_out $end
$var wire 1 K/ nor1_out $end
$var wire 1 L/ not3_out $end

$scope module iXOR1 $end
$var wire 1 &" in1 $end
$var wire 1 Q. in2 $end
$var wire 1 E/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 E/ in1 $end
$var wire 1 W. in2 $end
$var wire 1 S! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 E/ in1 $end
$var wire 1 W. in2 $end
$var wire 1 G/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 G/ in1 $end
$var wire 1 I/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 &" in1 $end
$var wire 1 Q. in2 $end
$var wire 1 H/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 H/ in1 $end
$var wire 1 J/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 I/ in1 $end
$var wire 1 J/ in2 $end
$var wire 1 K/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 K/ in1 $end
$var wire 1 B/ out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 %" A $end
$var wire 1 P. B $end
$var wire 1 B/ Cin $end
$var wire 1 R! S $end
$var wire 1 C/ Cout $end
$var wire 1 M/ xor1_out $end
$var wire 1 N/ xor2_out $end
$var wire 1 O/ nand1_out $end
$var wire 1 P/ nand2_out $end
$var wire 1 Q/ not1_out $end
$var wire 1 R/ not2_out $end
$var wire 1 S/ nor1_out $end
$var wire 1 T/ not3_out $end

$scope module iXOR1 $end
$var wire 1 %" in1 $end
$var wire 1 P. in2 $end
$var wire 1 M/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 M/ in1 $end
$var wire 1 B/ in2 $end
$var wire 1 R! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 M/ in1 $end
$var wire 1 B/ in2 $end
$var wire 1 O/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 O/ in1 $end
$var wire 1 Q/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 %" in1 $end
$var wire 1 P. in2 $end
$var wire 1 P/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 P/ in1 $end
$var wire 1 R/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 Q/ in1 $end
$var wire 1 R/ in2 $end
$var wire 1 S/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 S/ in1 $end
$var wire 1 C/ out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 $" A $end
$var wire 1 O. B $end
$var wire 1 C/ Cin $end
$var wire 1 Q! S $end
$var wire 1 D/ Cout $end
$var wire 1 U/ xor1_out $end
$var wire 1 V/ xor2_out $end
$var wire 1 W/ nand1_out $end
$var wire 1 X/ nand2_out $end
$var wire 1 Y/ not1_out $end
$var wire 1 Z/ not2_out $end
$var wire 1 [/ nor1_out $end
$var wire 1 \/ not3_out $end

$scope module iXOR1 $end
$var wire 1 $" in1 $end
$var wire 1 O. in2 $end
$var wire 1 U/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 U/ in1 $end
$var wire 1 C/ in2 $end
$var wire 1 Q! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 U/ in1 $end
$var wire 1 C/ in2 $end
$var wire 1 W/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 W/ in1 $end
$var wire 1 Y/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 $" in1 $end
$var wire 1 O. in2 $end
$var wire 1 X/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 X/ in1 $end
$var wire 1 Z/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 Y/ in1 $end
$var wire 1 Z/ in2 $end
$var wire 1 [/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 [/ in1 $end
$var wire 1 D/ out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 #" A $end
$var wire 1 N. B $end
$var wire 1 D/ Cin $end
$var wire 1 P! S $end
$var wire 1 X. Cout $end
$var wire 1 ]/ xor1_out $end
$var wire 1 ^/ xor2_out $end
$var wire 1 _/ nand1_out $end
$var wire 1 `/ nand2_out $end
$var wire 1 a/ not1_out $end
$var wire 1 b/ not2_out $end
$var wire 1 c/ nor1_out $end
$var wire 1 d/ not3_out $end

$scope module iXOR1 $end
$var wire 1 #" in1 $end
$var wire 1 N. in2 $end
$var wire 1 ]/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 ]/ in1 $end
$var wire 1 D/ in2 $end
$var wire 1 P! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 ]/ in1 $end
$var wire 1 D/ in2 $end
$var wire 1 _/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 _/ in1 $end
$var wire 1 a/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 #" in1 $end
$var wire 1 N. in2 $end
$var wire 1 `/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 `/ in1 $end
$var wire 1 b/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 a/ in1 $end
$var wire 1 b/ in2 $end
$var wire 1 c/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 c/ in1 $end
$var wire 1 X. out $end
$upscope $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 }! A [3] $end
$var wire 1 ~! A [2] $end
$var wire 1 !" A [1] $end
$var wire 1 "" A [0] $end
$var wire 1 J. B [3] $end
$var wire 1 K. B [2] $end
$var wire 1 L. B [1] $end
$var wire 1 M. B [0] $end
$var wire 1 X. Cin $end
$var wire 1 L! S [3] $end
$var wire 1 M! S [2] $end
$var wire 1 N! S [1] $end
$var wire 1 O! S [0] $end
$var wire 1 U. Cout $end
$var wire 1 e/ Cout1 $end
$var wire 1 f/ Cout2 $end
$var wire 1 g/ Cout3 $end

$scope module iADDER1 $end
$var wire 1 "" A $end
$var wire 1 M. B $end
$var wire 1 X. Cin $end
$var wire 1 O! S $end
$var wire 1 e/ Cout $end
$var wire 1 h/ xor1_out $end
$var wire 1 i/ xor2_out $end
$var wire 1 j/ nand1_out $end
$var wire 1 k/ nand2_out $end
$var wire 1 l/ not1_out $end
$var wire 1 m/ not2_out $end
$var wire 1 n/ nor1_out $end
$var wire 1 o/ not3_out $end

$scope module iXOR1 $end
$var wire 1 "" in1 $end
$var wire 1 M. in2 $end
$var wire 1 h/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 h/ in1 $end
$var wire 1 X. in2 $end
$var wire 1 O! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 h/ in1 $end
$var wire 1 X. in2 $end
$var wire 1 j/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 j/ in1 $end
$var wire 1 l/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 "" in1 $end
$var wire 1 M. in2 $end
$var wire 1 k/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 k/ in1 $end
$var wire 1 m/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 l/ in1 $end
$var wire 1 m/ in2 $end
$var wire 1 n/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 n/ in1 $end
$var wire 1 e/ out $end
$upscope $end
$upscope $end

$scope module iADDER2 $end
$var wire 1 !" A $end
$var wire 1 L. B $end
$var wire 1 e/ Cin $end
$var wire 1 N! S $end
$var wire 1 f/ Cout $end
$var wire 1 p/ xor1_out $end
$var wire 1 q/ xor2_out $end
$var wire 1 r/ nand1_out $end
$var wire 1 s/ nand2_out $end
$var wire 1 t/ not1_out $end
$var wire 1 u/ not2_out $end
$var wire 1 v/ nor1_out $end
$var wire 1 w/ not3_out $end

$scope module iXOR1 $end
$var wire 1 !" in1 $end
$var wire 1 L. in2 $end
$var wire 1 p/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 p/ in1 $end
$var wire 1 e/ in2 $end
$var wire 1 N! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 p/ in1 $end
$var wire 1 e/ in2 $end
$var wire 1 r/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 r/ in1 $end
$var wire 1 t/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 !" in1 $end
$var wire 1 L. in2 $end
$var wire 1 s/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 s/ in1 $end
$var wire 1 u/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 t/ in1 $end
$var wire 1 u/ in2 $end
$var wire 1 v/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 v/ in1 $end
$var wire 1 f/ out $end
$upscope $end
$upscope $end

$scope module iADDER3 $end
$var wire 1 ~! A $end
$var wire 1 K. B $end
$var wire 1 f/ Cin $end
$var wire 1 M! S $end
$var wire 1 g/ Cout $end
$var wire 1 x/ xor1_out $end
$var wire 1 y/ xor2_out $end
$var wire 1 z/ nand1_out $end
$var wire 1 {/ nand2_out $end
$var wire 1 |/ not1_out $end
$var wire 1 }/ not2_out $end
$var wire 1 ~/ nor1_out $end
$var wire 1 !0 not3_out $end

$scope module iXOR1 $end
$var wire 1 ~! in1 $end
$var wire 1 K. in2 $end
$var wire 1 x/ out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 x/ in1 $end
$var wire 1 f/ in2 $end
$var wire 1 M! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 x/ in1 $end
$var wire 1 f/ in2 $end
$var wire 1 z/ out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 z/ in1 $end
$var wire 1 |/ out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 ~! in1 $end
$var wire 1 K. in2 $end
$var wire 1 {/ out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 {/ in1 $end
$var wire 1 }/ out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 |/ in1 $end
$var wire 1 }/ in2 $end
$var wire 1 ~/ out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 ~/ in1 $end
$var wire 1 g/ out $end
$upscope $end
$upscope $end

$scope module iADDER4 $end
$var wire 1 }! A $end
$var wire 1 J. B $end
$var wire 1 g/ Cin $end
$var wire 1 L! S $end
$var wire 1 U. Cout $end
$var wire 1 "0 xor1_out $end
$var wire 1 #0 xor2_out $end
$var wire 1 $0 nand1_out $end
$var wire 1 %0 nand2_out $end
$var wire 1 &0 not1_out $end
$var wire 1 '0 not2_out $end
$var wire 1 (0 nor1_out $end
$var wire 1 )0 not3_out $end

$scope module iXOR1 $end
$var wire 1 }! in1 $end
$var wire 1 J. in2 $end
$var wire 1 "0 out $end
$upscope $end

$scope module iXOR2 $end
$var wire 1 "0 in1 $end
$var wire 1 g/ in2 $end
$var wire 1 L! out $end
$upscope $end

$scope module iNAND1 $end
$var wire 1 "0 in1 $end
$var wire 1 g/ in2 $end
$var wire 1 $0 out $end
$upscope $end

$scope module iNOT1 $end
$var wire 1 $0 in1 $end
$var wire 1 &0 out $end
$upscope $end

$scope module iNAND2 $end
$var wire 1 }! in1 $end
$var wire 1 J. in2 $end
$var wire 1 %0 out $end
$upscope $end

$scope module iNOT2 $end
$var wire 1 %0 in1 $end
$var wire 1 '0 out $end
$upscope $end

$scope module iNOR1 $end
$var wire 1 &0 in1 $end
$var wire 1 '0 in2 $end
$var wire 1 (0 out $end
$upscope $end

$scope module iNOT3 $end
$var wire 1 (0 in1 $end
$var wire 1 U. out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module iALU $end
$var wire 1 ]! A [15] $end
$var wire 1 ^! A [14] $end
$var wire 1 _! A [13] $end
$var wire 1 `! A [12] $end
$var wire 1 a! A [11] $end
$var wire 1 b! A [10] $end
$var wire 1 c! A [9] $end
$var wire 1 d! A [8] $end
$var wire 1 e! A [7] $end
$var wire 1 f! A [6] $end
$var wire 1 g! A [5] $end
$var wire 1 h! A [4] $end
$var wire 1 i! A [3] $end
$var wire 1 j! A [2] $end
$var wire 1 k! A [1] $end
$var wire 1 l! A [0] $end
$var wire 1 *0 B [15] $end
$var wire 1 +0 B [14] $end
$var wire 1 ,0 B [13] $end
$var wire 1 -0 B [12] $end
$var wire 1 .0 B [11] $end
$var wire 1 /0 B [10] $end
$var wire 1 00 B [9] $end
$var wire 1 10 B [8] $end
$var wire 1 20 B [7] $end
$var wire 1 30 B [6] $end
$var wire 1 40 B [5] $end
$var wire 1 ;" B [4] $end
$var wire 1 <" B [3] $end
$var wire 1 =" B [2] $end
$var wire 1 >" B [1] $end
$var wire 1 ?" B [0] $end
$var wire 1 ]! read1data [15] $end
$var wire 1 ^! read1data [14] $end
$var wire 1 _! read1data [13] $end
$var wire 1 `! read1data [12] $end
$var wire 1 a! read1data [11] $end
$var wire 1 b! read1data [10] $end
$var wire 1 c! read1data [9] $end
$var wire 1 d! read1data [8] $end
$var wire 1 e! read1data [7] $end
$var wire 1 f! read1data [6] $end
$var wire 1 g! read1data [5] $end
$var wire 1 h! read1data [4] $end
$var wire 1 i! read1data [3] $end
$var wire 1 j! read1data [2] $end
$var wire 1 k! read1data [1] $end
$var wire 1 l! read1data [0] $end
$var wire 1 m! read2data [15] $end
$var wire 1 n! read2data [14] $end
$var wire 1 o! read2data [13] $end
$var wire 1 p! read2data [12] $end
$var wire 1 q! read2data [11] $end
$var wire 1 r! read2data [10] $end
$var wire 1 s! read2data [9] $end
$var wire 1 t! read2data [8] $end
$var wire 1 u! read2data [7] $end
$var wire 1 v! read2data [6] $end
$var wire 1 w! read2data [5] $end
$var wire 1 x! read2data [4] $end
$var wire 1 y! read2data [3] $end
$var wire 1 z! read2data [2] $end
$var wire 1 {! read2data [1] $end
$var wire 1 |! read2data [0] $end
$var wire 1 ,! writedata [15] $end
$var wire 1 -! writedata [14] $end
$var wire 1 .! writedata [13] $end
$var wire 1 /! writedata [12] $end
$var wire 1 0! writedata [11] $end
$var wire 1 1! writedata [10] $end
$var wire 1 2! writedata [9] $end
$var wire 1 3! writedata [8] $end
$var wire 1 4! writedata [7] $end
$var wire 1 5! writedata [6] $end
$var wire 1 6! writedata [5] $end
$var wire 1 7! writedata [4] $end
$var wire 1 8! writedata [3] $end
$var wire 1 9! writedata [2] $end
$var wire 1 :! writedata [1] $end
$var wire 1 ;! writedata [0] $end
$var wire 1 50 Cin $end
$var wire 1 C" Op [1] $end
$var wire 1 D" Op [0] $end
$var wire 1 60 invA $end
$var wire 1 70 invB $end
$var wire 1 80 sign $end
$var wire 1 ,! Out [15] $end
$var wire 1 -! Out [14] $end
$var wire 1 .! Out [13] $end
$var wire 1 /! Out [12] $end
$var wire 1 0! Out [11] $end
$var wire 1 1! Out [10] $end
$var wire 1 2! Out [9] $end
$var wire 1 3! Out [8] $end
$var wire 1 4! Out [7] $end
$var wire 1 5! Out [6] $end
$var wire 1 6! Out [5] $end
$var wire 1 7! Out [4] $end
$var wire 1 8! Out [3] $end
$var wire 1 9! Out [2] $end
$var wire 1 :! Out [1] $end
$var wire 1 ;! Out [0] $end
$var wire 1 90 Ofl $end
$var wire 1 :0 Z $end
$var wire 1 ;0 beq_imm [15] $end
$var wire 1 <0 beq_imm [14] $end
$var wire 1 =0 beq_imm [13] $end
$var wire 1 >0 beq_imm [12] $end
$var wire 1 ?0 beq_imm [11] $end
$var wire 1 @0 beq_imm [10] $end
$var wire 1 A0 beq_imm [9] $end
$var wire 1 B0 beq_imm [8] $end
$var wire 1 8" beq_imm [7] $end
$var wire 1 9" beq_imm [6] $end
$var wire 1 :" beq_imm [5] $end
$var wire 1 ;" beq_imm [4] $end
$var wire 1 <" beq_imm [3] $end
$var wire 1 =" beq_imm [2] $end
$var wire 1 >" beq_imm [1] $end
$var wire 1 ?" beq_imm [0] $end
$var wire 1 e" beq_out [15] $end
$var wire 1 f" beq_out [14] $end
$var wire 1 g" beq_out [13] $end
$var wire 1 h" beq_out [12] $end
$var wire 1 i" beq_out [11] $end
$var wire 1 j" beq_out [10] $end
$var wire 1 k" beq_out [9] $end
$var wire 1 l" beq_out [8] $end
$var wire 1 m" beq_out [7] $end
$var wire 1 n" beq_out [6] $end
$var wire 1 o" beq_out [5] $end
$var wire 1 p" beq_out [4] $end
$var wire 1 q" beq_out [3] $end
$var wire 1 r" beq_out [2] $end
$var wire 1 s" beq_out [1] $end
$var wire 1 t" beq_out [0] $end
$var wire 1 C0 inputZero [15] $end
$var wire 1 D0 inputZero [14] $end
$var wire 1 E0 inputZero [13] $end
$var wire 1 F0 inputZero [12] $end
$var wire 1 G0 inputZero [11] $end
$var wire 1 H0 inputZero [10] $end
$var wire 1 I0 inputZero [9] $end
$var wire 1 J0 inputZero [8] $end
$var wire 1 K0 inputZero [7] $end
$var wire 1 L0 inputZero [6] $end
$var wire 1 M0 inputZero [5] $end
$var wire 1 N0 inputZero [4] $end
$var wire 1 O0 inputZero [3] $end
$var wire 1 P0 inputZero [2] $end
$var wire 1 Q0 inputZero [1] $end
$var wire 1 R0 inputZero [0] $end
$var wire 1 S0 inputOne [15] $end
$var wire 1 T0 inputOne [14] $end
$var wire 1 U0 inputOne [13] $end
$var wire 1 V0 inputOne [12] $end
$var wire 1 W0 inputOne [11] $end
$var wire 1 X0 inputOne [10] $end
$var wire 1 Y0 inputOne [9] $end
$var wire 1 Z0 inputOne [8] $end
$var wire 1 [0 inputOne [7] $end
$var wire 1 \0 inputOne [6] $end
$var wire 1 ]0 inputOne [5] $end
$var wire 1 ^0 inputOne [4] $end
$var wire 1 _0 inputOne [3] $end
$var wire 1 `0 inputOne [2] $end
$var wire 1 a0 inputOne [1] $end
$var wire 1 b0 inputOne [0] $end
$var wire 1 c0 A_modif [15] $end
$var wire 1 d0 A_modif [14] $end
$var wire 1 e0 A_modif [13] $end
$var wire 1 f0 A_modif [12] $end
$var wire 1 g0 A_modif [11] $end
$var wire 1 h0 A_modif [10] $end
$var wire 1 i0 A_modif [9] $end
$var wire 1 j0 A_modif [8] $end
$var wire 1 k0 A_modif [7] $end
$var wire 1 l0 A_modif [6] $end
$var wire 1 m0 A_modif [5] $end
$var wire 1 n0 A_modif [4] $end
$var wire 1 o0 A_modif [3] $end
$var wire 1 p0 A_modif [2] $end
$var wire 1 q0 A_modif [1] $end
$var wire 1 r0 A_modif [0] $end
$var wire 1 s0 B_modif [15] $end
$var wire 1 t0 B_modif [14] $end
$var wire 1 u0 B_modif [13] $end
$var wire 1 v0 B_modif [12] $end
$var wire 1 w0 B_modif [11] $end
$var wire 1 x0 B_modif [10] $end
$var wire 1 y0 B_modif [9] $end
$var wire 1 z0 B_modif [8] $end
$var wire 1 {0 B_modif [7] $end
$var wire 1 |0 B_modif [6] $end
$var wire 1 }0 B_modif [5] $end
$var wire 1 ~0 B_modif [4] $end
$var wire 1 !1 B_modif [3] $end
$var wire 1 "1 B_modif [2] $end
$var wire 1 #1 B_modif [1] $end
$var wire 1 $1 B_modif [0] $end
$var wire 1 %1 sum [15] $end
$var wire 1 &1 sum [14] $end
$var wire 1 '1 sum [13] $end
$var wire 1 (1 sum [12] $end
$var wire 1 )1 sum [11] $end
$var wire 1 *1 sum [10] $end
$var wire 1 +1 sum [9] $end
$var wire 1 ,1 sum [8] $end
$var wire 1 -1 sum [7] $end
$var wire 1 .1 sum [6] $end
$var wire 1 /1 sum [5] $end
$var wire 1 01 sum [4] $end
$var wire 1 11 sum [3] $end
$var wire 1 21 sum [2] $end
$var wire 1 31 sum [1] $end
$var wire 1 41 sum [0] $end
$var wire 1 51 cla_cout $end
$var wire 1 61 tempOfl $end
$var wire 1 71 addOverflow $end
$var wire 1 81 subOverflow $end

$scope module iCLA $end
$var wire 1 c0 a [15] $end
$var wire 1 d0 a [14] $end
$var wire 1 e0 a [13] $end
$var wire 1 f0 a [12] $end
$var wire 1 g0 a [11] $end
$var wire 1 h0 a [10] $end
$var wire 1 i0 a [9] $end
$var wire 1 j0 a [8] $end
$var wire 1 k0 a [7] $end
$var wire 1 l0 a [6] $end
$var wire 1 m0 a [5] $end
$var wire 1 n0 a [4] $end
$var wire 1 o0 a [3] $end
$var wire 1 p0 a [2] $end
$var wire 1 q0 a [1] $end
$var wire 1 r0 a [0] $end
$var wire 1 s0 b [15] $end
$var wire 1 t0 b [14] $end
$var wire 1 u0 b [13] $end
$var wire 1 v0 b [12] $end
$var wire 1 w0 b [11] $end
$var wire 1 x0 b [10] $end
$var wire 1 y0 b [9] $end
$var wire 1 z0 b [8] $end
$var wire 1 {0 b [7] $end
$var wire 1 |0 b [6] $end
$var wire 1 }0 b [5] $end
$var wire 1 ~0 b [4] $end
$var wire 1 !1 b [3] $end
$var wire 1 "1 b [2] $end
$var wire 1 #1 b [1] $end
$var wire 1 $1 b [0] $end
$var wire 1 50 cin $end
$var wire 1 %1 sum [15] $end
$var wire 1 &1 sum [14] $end
$var wire 1 '1 sum [13] $end
$var wire 1 (1 sum [12] $end
$var wire 1 )1 sum [11] $end
$var wire 1 *1 sum [10] $end
$var wire 1 +1 sum [9] $end
$var wire 1 ,1 sum [8] $end
$var wire 1 -1 sum [7] $end
$var wire 1 .1 sum [6] $end
$var wire 1 /1 sum [5] $end
$var wire 1 01 sum [4] $end
$var wire 1 11 sum [3] $end
$var wire 1 21 sum [2] $end
$var wire 1 31 sum [1] $end
$var wire 1 41 sum [0] $end
$var wire 1 61 cout $end
$var wire 1 91 c1 $end
$var wire 1 :1 c2 $end
$var wire 1 ;1 c3 $end

$scope module cla1 $end
$var wire 1 o0 a [3] $end
$var wire 1 p0 a [2] $end
$var wire 1 q0 a [1] $end
$var wire 1 r0 a [0] $end
$var wire 1 !1 b [3] $end
$var wire 1 "1 b [2] $end
$var wire 1 #1 b [1] $end
$var wire 1 $1 b [0] $end
$var wire 1 50 cin $end
$var wire 1 11 sum [3] $end
$var wire 1 21 sum [2] $end
$var wire 1 31 sum [1] $end
$var wire 1 41 sum [0] $end
$var wire 1 91 cout $end
$var wire 1 <1 prop [3] $end
$var wire 1 =1 prop [2] $end
$var wire 1 >1 prop [1] $end
$var wire 1 ?1 prop [0] $end
$var wire 1 @1 gen [3] $end
$var wire 1 A1 gen [2] $end
$var wire 1 B1 gen [1] $end
$var wire 1 C1 gen [0] $end
$var wire 1 D1 carry [3] $end
$var wire 1 E1 carry [2] $end
$var wire 1 F1 carry [1] $end
$var wire 1 G1 carry [0] $end
$upscope $end

$scope module cla2 $end
$var wire 1 k0 a [3] $end
$var wire 1 l0 a [2] $end
$var wire 1 m0 a [1] $end
$var wire 1 n0 a [0] $end
$var wire 1 {0 b [3] $end
$var wire 1 |0 b [2] $end
$var wire 1 }0 b [1] $end
$var wire 1 ~0 b [0] $end
$var wire 1 91 cin $end
$var wire 1 -1 sum [3] $end
$var wire 1 .1 sum [2] $end
$var wire 1 /1 sum [1] $end
$var wire 1 01 sum [0] $end
$var wire 1 :1 cout $end
$var wire 1 H1 prop [3] $end
$var wire 1 I1 prop [2] $end
$var wire 1 J1 prop [1] $end
$var wire 1 K1 prop [0] $end
$var wire 1 L1 gen [3] $end
$var wire 1 M1 gen [2] $end
$var wire 1 N1 gen [1] $end
$var wire 1 O1 gen [0] $end
$var wire 1 P1 carry [3] $end
$var wire 1 Q1 carry [2] $end
$var wire 1 R1 carry [1] $end
$var wire 1 S1 carry [0] $end
$upscope $end

$scope module cla3 $end
$var wire 1 g0 a [3] $end
$var wire 1 h0 a [2] $end
$var wire 1 i0 a [1] $end
$var wire 1 j0 a [0] $end
$var wire 1 w0 b [3] $end
$var wire 1 x0 b [2] $end
$var wire 1 y0 b [1] $end
$var wire 1 z0 b [0] $end
$var wire 1 :1 cin $end
$var wire 1 )1 sum [3] $end
$var wire 1 *1 sum [2] $end
$var wire 1 +1 sum [1] $end
$var wire 1 ,1 sum [0] $end
$var wire 1 ;1 cout $end
$var wire 1 T1 prop [3] $end
$var wire 1 U1 prop [2] $end
$var wire 1 V1 prop [1] $end
$var wire 1 W1 prop [0] $end
$var wire 1 X1 gen [3] $end
$var wire 1 Y1 gen [2] $end
$var wire 1 Z1 gen [1] $end
$var wire 1 [1 gen [0] $end
$var wire 1 \1 carry [3] $end
$var wire 1 ]1 carry [2] $end
$var wire 1 ^1 carry [1] $end
$var wire 1 _1 carry [0] $end
$upscope $end

$scope module cla4 $end
$var wire 1 c0 a [3] $end
$var wire 1 d0 a [2] $end
$var wire 1 e0 a [1] $end
$var wire 1 f0 a [0] $end
$var wire 1 s0 b [3] $end
$var wire 1 t0 b [2] $end
$var wire 1 u0 b [1] $end
$var wire 1 v0 b [0] $end
$var wire 1 ;1 cin $end
$var wire 1 %1 sum [3] $end
$var wire 1 &1 sum [2] $end
$var wire 1 '1 sum [1] $end
$var wire 1 (1 sum [0] $end
$var wire 1 61 cout $end
$var wire 1 `1 prop [3] $end
$var wire 1 a1 prop [2] $end
$var wire 1 b1 prop [1] $end
$var wire 1 c1 prop [0] $end
$var wire 1 d1 gen [3] $end
$var wire 1 e1 gen [2] $end
$var wire 1 f1 gen [1] $end
$var wire 1 g1 gen [0] $end
$var wire 1 h1 carry [3] $end
$var wire 1 i1 carry [2] $end
$var wire 1 j1 carry [1] $end
$var wire 1 k1 carry [0] $end
$upscope $end
$upscope $end

$scope module iMUX4TO1_1 $end
$var wire 1 C" select [1] $end
$var wire 1 D" select [0] $end
$var wire 1 l1 a [15] $end
$var wire 1 m1 a [14] $end
$var wire 1 n1 a [13] $end
$var wire 1 o1 a [12] $end
$var wire 1 p1 a [11] $end
$var wire 1 q1 a [10] $end
$var wire 1 r1 a [9] $end
$var wire 1 s1 a [8] $end
$var wire 1 t1 a [7] $end
$var wire 1 u1 a [6] $end
$var wire 1 v1 a [5] $end
$var wire 1 w1 a [4] $end
$var wire 1 x1 a [3] $end
$var wire 1 y1 a [2] $end
$var wire 1 z1 a [1] $end
$var wire 1 {1 a [0] $end
$var wire 1 %1 b [15] $end
$var wire 1 &1 b [14] $end
$var wire 1 '1 b [13] $end
$var wire 1 (1 b [12] $end
$var wire 1 )1 b [11] $end
$var wire 1 *1 b [10] $end
$var wire 1 +1 b [9] $end
$var wire 1 ,1 b [8] $end
$var wire 1 -1 b [7] $end
$var wire 1 .1 b [6] $end
$var wire 1 /1 b [5] $end
$var wire 1 01 b [4] $end
$var wire 1 11 b [3] $end
$var wire 1 21 b [2] $end
$var wire 1 31 b [1] $end
$var wire 1 41 b [0] $end
$var wire 1 |1 c [15] $end
$var wire 1 }1 c [14] $end
$var wire 1 ~1 c [13] $end
$var wire 1 !2 c [12] $end
$var wire 1 "2 c [11] $end
$var wire 1 #2 c [10] $end
$var wire 1 $2 c [9] $end
$var wire 1 %2 c [8] $end
$var wire 1 &2 c [7] $end
$var wire 1 '2 c [6] $end
$var wire 1 (2 c [5] $end
$var wire 1 )2 c [4] $end
$var wire 1 *2 c [3] $end
$var wire 1 +2 c [2] $end
$var wire 1 ,2 c [1] $end
$var wire 1 -2 c [0] $end
$var wire 1 e" d [15] $end
$var wire 1 f" d [14] $end
$var wire 1 g" d [13] $end
$var wire 1 h" d [12] $end
$var wire 1 i" d [11] $end
$var wire 1 j" d [10] $end
$var wire 1 k" d [9] $end
$var wire 1 l" d [8] $end
$var wire 1 m" d [7] $end
$var wire 1 n" d [6] $end
$var wire 1 o" d [5] $end
$var wire 1 p" d [4] $end
$var wire 1 q" d [3] $end
$var wire 1 r" d [2] $end
$var wire 1 s" d [1] $end
$var wire 1 t" d [0] $end
$var wire 1 ,! out [15] $end
$var wire 1 -! out [14] $end
$var wire 1 .! out [13] $end
$var wire 1 /! out [12] $end
$var wire 1 0! out [11] $end
$var wire 1 1! out [10] $end
$var wire 1 2! out [9] $end
$var wire 1 3! out [8] $end
$var wire 1 4! out [7] $end
$var wire 1 5! out [6] $end
$var wire 1 6! out [5] $end
$var wire 1 7! out [4] $end
$var wire 1 8! out [3] $end
$var wire 1 9! out [2] $end
$var wire 1 :! out [1] $end
$var wire 1 ;! out [0] $end
$var wire 1 .2 wire1 [15] $end
$var wire 1 /2 wire1 [14] $end
$var wire 1 02 wire1 [13] $end
$var wire 1 12 wire1 [12] $end
$var wire 1 22 wire1 [11] $end
$var wire 1 32 wire1 [10] $end
$var wire 1 42 wire1 [9] $end
$var wire 1 52 wire1 [8] $end
$var wire 1 62 wire1 [7] $end
$var wire 1 72 wire1 [6] $end
$var wire 1 82 wire1 [5] $end
$var wire 1 92 wire1 [4] $end
$var wire 1 :2 wire1 [3] $end
$var wire 1 ;2 wire1 [2] $end
$var wire 1 <2 wire1 [1] $end
$var wire 1 =2 wire1 [0] $end
$var wire 1 >2 wire2 [15] $end
$var wire 1 ?2 wire2 [14] $end
$var wire 1 @2 wire2 [13] $end
$var wire 1 A2 wire2 [12] $end
$var wire 1 B2 wire2 [11] $end
$var wire 1 C2 wire2 [10] $end
$var wire 1 D2 wire2 [9] $end
$var wire 1 E2 wire2 [8] $end
$var wire 1 F2 wire2 [7] $end
$var wire 1 G2 wire2 [6] $end
$var wire 1 H2 wire2 [5] $end
$var wire 1 I2 wire2 [4] $end
$var wire 1 J2 wire2 [3] $end
$var wire 1 K2 wire2 [2] $end
$var wire 1 L2 wire2 [1] $end
$var wire 1 M2 wire2 [0] $end

$scope module iMUX_2_1_1 $end
$var wire 1 D" select $end
$var wire 1 l1 a [15] $end
$var wire 1 m1 a [14] $end
$var wire 1 n1 a [13] $end
$var wire 1 o1 a [12] $end
$var wire 1 p1 a [11] $end
$var wire 1 q1 a [10] $end
$var wire 1 r1 a [9] $end
$var wire 1 s1 a [8] $end
$var wire 1 t1 a [7] $end
$var wire 1 u1 a [6] $end
$var wire 1 v1 a [5] $end
$var wire 1 w1 a [4] $end
$var wire 1 x1 a [3] $end
$var wire 1 y1 a [2] $end
$var wire 1 z1 a [1] $end
$var wire 1 {1 a [0] $end
$var wire 1 %1 b [15] $end
$var wire 1 &1 b [14] $end
$var wire 1 '1 b [13] $end
$var wire 1 (1 b [12] $end
$var wire 1 )1 b [11] $end
$var wire 1 *1 b [10] $end
$var wire 1 +1 b [9] $end
$var wire 1 ,1 b [8] $end
$var wire 1 -1 b [7] $end
$var wire 1 .1 b [6] $end
$var wire 1 /1 b [5] $end
$var wire 1 01 b [4] $end
$var wire 1 11 b [3] $end
$var wire 1 21 b [2] $end
$var wire 1 31 b [1] $end
$var wire 1 41 b [0] $end
$var wire 1 .2 out [15] $end
$var wire 1 /2 out [14] $end
$var wire 1 02 out [13] $end
$var wire 1 12 out [12] $end
$var wire 1 22 out [11] $end
$var wire 1 32 out [10] $end
$var wire 1 42 out [9] $end
$var wire 1 52 out [8] $end
$var wire 1 62 out [7] $end
$var wire 1 72 out [6] $end
$var wire 1 82 out [5] $end
$var wire 1 92 out [4] $end
$var wire 1 :2 out [3] $end
$var wire 1 ;2 out [2] $end
$var wire 1 <2 out [1] $end
$var wire 1 =2 out [0] $end
$var wire 1 N2 and1 [15] $end
$var wire 1 O2 and1 [14] $end
$var wire 1 P2 and1 [13] $end
$var wire 1 Q2 and1 [12] $end
$var wire 1 R2 and1 [11] $end
$var wire 1 S2 and1 [10] $end
$var wire 1 T2 and1 [9] $end
$var wire 1 U2 and1 [8] $end
$var wire 1 V2 and1 [7] $end
$var wire 1 W2 and1 [6] $end
$var wire 1 X2 and1 [5] $end
$var wire 1 Y2 and1 [4] $end
$var wire 1 Z2 and1 [3] $end
$var wire 1 [2 and1 [2] $end
$var wire 1 \2 and1 [1] $end
$var wire 1 ]2 and1 [0] $end
$var wire 1 ^2 and2 [15] $end
$var wire 1 _2 and2 [14] $end
$var wire 1 `2 and2 [13] $end
$var wire 1 a2 and2 [12] $end
$var wire 1 b2 and2 [11] $end
$var wire 1 c2 and2 [10] $end
$var wire 1 d2 and2 [9] $end
$var wire 1 e2 and2 [8] $end
$var wire 1 f2 and2 [7] $end
$var wire 1 g2 and2 [6] $end
$var wire 1 h2 and2 [5] $end
$var wire 1 i2 and2 [4] $end
$var wire 1 j2 and2 [3] $end
$var wire 1 k2 and2 [2] $end
$var wire 1 l2 and2 [1] $end
$var wire 1 m2 and2 [0] $end
$upscope $end

$scope module iMUX_2_1_2 $end
$var wire 1 D" select $end
$var wire 1 |1 a [15] $end
$var wire 1 }1 a [14] $end
$var wire 1 ~1 a [13] $end
$var wire 1 !2 a [12] $end
$var wire 1 "2 a [11] $end
$var wire 1 #2 a [10] $end
$var wire 1 $2 a [9] $end
$var wire 1 %2 a [8] $end
$var wire 1 &2 a [7] $end
$var wire 1 '2 a [6] $end
$var wire 1 (2 a [5] $end
$var wire 1 )2 a [4] $end
$var wire 1 *2 a [3] $end
$var wire 1 +2 a [2] $end
$var wire 1 ,2 a [1] $end
$var wire 1 -2 a [0] $end
$var wire 1 e" b [15] $end
$var wire 1 f" b [14] $end
$var wire 1 g" b [13] $end
$var wire 1 h" b [12] $end
$var wire 1 i" b [11] $end
$var wire 1 j" b [10] $end
$var wire 1 k" b [9] $end
$var wire 1 l" b [8] $end
$var wire 1 m" b [7] $end
$var wire 1 n" b [6] $end
$var wire 1 o" b [5] $end
$var wire 1 p" b [4] $end
$var wire 1 q" b [3] $end
$var wire 1 r" b [2] $end
$var wire 1 s" b [1] $end
$var wire 1 t" b [0] $end
$var wire 1 >2 out [15] $end
$var wire 1 ?2 out [14] $end
$var wire 1 @2 out [13] $end
$var wire 1 A2 out [12] $end
$var wire 1 B2 out [11] $end
$var wire 1 C2 out [10] $end
$var wire 1 D2 out [9] $end
$var wire 1 E2 out [8] $end
$var wire 1 F2 out [7] $end
$var wire 1 G2 out [6] $end
$var wire 1 H2 out [5] $end
$var wire 1 I2 out [4] $end
$var wire 1 J2 out [3] $end
$var wire 1 K2 out [2] $end
$var wire 1 L2 out [1] $end
$var wire 1 M2 out [0] $end
$var wire 1 n2 and1 [15] $end
$var wire 1 o2 and1 [14] $end
$var wire 1 p2 and1 [13] $end
$var wire 1 q2 and1 [12] $end
$var wire 1 r2 and1 [11] $end
$var wire 1 s2 and1 [10] $end
$var wire 1 t2 and1 [9] $end
$var wire 1 u2 and1 [8] $end
$var wire 1 v2 and1 [7] $end
$var wire 1 w2 and1 [6] $end
$var wire 1 x2 and1 [5] $end
$var wire 1 y2 and1 [4] $end
$var wire 1 z2 and1 [3] $end
$var wire 1 {2 and1 [2] $end
$var wire 1 |2 and1 [1] $end
$var wire 1 }2 and1 [0] $end
$var wire 1 ~2 and2 [15] $end
$var wire 1 !3 and2 [14] $end
$var wire 1 "3 and2 [13] $end
$var wire 1 #3 and2 [12] $end
$var wire 1 $3 and2 [11] $end
$var wire 1 %3 and2 [10] $end
$var wire 1 &3 and2 [9] $end
$var wire 1 '3 and2 [8] $end
$var wire 1 (3 and2 [7] $end
$var wire 1 )3 and2 [6] $end
$var wire 1 *3 and2 [5] $end
$var wire 1 +3 and2 [4] $end
$var wire 1 ,3 and2 [3] $end
$var wire 1 -3 and2 [2] $end
$var wire 1 .3 and2 [1] $end
$var wire 1 /3 and2 [0] $end
$upscope $end

$scope module iMUX_2_1_3 $end
$var wire 1 C" select $end
$var wire 1 .2 a [15] $end
$var wire 1 /2 a [14] $end
$var wire 1 02 a [13] $end
$var wire 1 12 a [12] $end
$var wire 1 22 a [11] $end
$var wire 1 32 a [10] $end
$var wire 1 42 a [9] $end
$var wire 1 52 a [8] $end
$var wire 1 62 a [7] $end
$var wire 1 72 a [6] $end
$var wire 1 82 a [5] $end
$var wire 1 92 a [4] $end
$var wire 1 :2 a [3] $end
$var wire 1 ;2 a [2] $end
$var wire 1 <2 a [1] $end
$var wire 1 =2 a [0] $end
$var wire 1 >2 b [15] $end
$var wire 1 ?2 b [14] $end
$var wire 1 @2 b [13] $end
$var wire 1 A2 b [12] $end
$var wire 1 B2 b [11] $end
$var wire 1 C2 b [10] $end
$var wire 1 D2 b [9] $end
$var wire 1 E2 b [8] $end
$var wire 1 F2 b [7] $end
$var wire 1 G2 b [6] $end
$var wire 1 H2 b [5] $end
$var wire 1 I2 b [4] $end
$var wire 1 J2 b [3] $end
$var wire 1 K2 b [2] $end
$var wire 1 L2 b [1] $end
$var wire 1 M2 b [0] $end
$var wire 1 ,! out [15] $end
$var wire 1 -! out [14] $end
$var wire 1 .! out [13] $end
$var wire 1 /! out [12] $end
$var wire 1 0! out [11] $end
$var wire 1 1! out [10] $end
$var wire 1 2! out [9] $end
$var wire 1 3! out [8] $end
$var wire 1 4! out [7] $end
$var wire 1 5! out [6] $end
$var wire 1 6! out [5] $end
$var wire 1 7! out [4] $end
$var wire 1 8! out [3] $end
$var wire 1 9! out [2] $end
$var wire 1 :! out [1] $end
$var wire 1 ;! out [0] $end
$var wire 1 03 and1 [15] $end
$var wire 1 13 and1 [14] $end
$var wire 1 23 and1 [13] $end
$var wire 1 33 and1 [12] $end
$var wire 1 43 and1 [11] $end
$var wire 1 53 and1 [10] $end
$var wire 1 63 and1 [9] $end
$var wire 1 73 and1 [8] $end
$var wire 1 83 and1 [7] $end
$var wire 1 93 and1 [6] $end
$var wire 1 :3 and1 [5] $end
$var wire 1 ;3 and1 [4] $end
$var wire 1 <3 and1 [3] $end
$var wire 1 =3 and1 [2] $end
$var wire 1 >3 and1 [1] $end
$var wire 1 ?3 and1 [0] $end
$var wire 1 @3 and2 [15] $end
$var wire 1 A3 and2 [14] $end
$var wire 1 B3 and2 [13] $end
$var wire 1 C3 and2 [12] $end
$var wire 1 D3 and2 [11] $end
$var wire 1 E3 and2 [10] $end
$var wire 1 F3 and2 [9] $end
$var wire 1 G3 and2 [8] $end
$var wire 1 H3 and2 [7] $end
$var wire 1 I3 and2 [6] $end
$var wire 1 J3 and2 [5] $end
$var wire 1 K3 and2 [4] $end
$var wire 1 L3 and2 [3] $end
$var wire 1 M3 and2 [2] $end
$var wire 1 N3 and2 [1] $end
$var wire 1 O3 and2 [0] $end
